# -*- coding: utf-8 -*-
"""
Created on Tue Dec 13 10:04:48 2022

@author: User
"""

import numpy as np
import math

#Global Functions

#Function Distance of a cube to a define volume
def Dist_Cube_to_V(x_cube, y_cube, z_cube, x_in_Vol, x_out_Vol, y_in_Vol, y_out_Vol, z_in_Vol, z_out_Vol):
    if x_in_Vol <= x_cube <= x_out_Vol:
        norm_x = 0
    else:
        norm_x = min(abs(x_in_Vol - x_cube), abs(x_out_Vol - x_cube))
    if y_in_Vol <= y_cube <= y_out_Vol:
        norm_y = 0
    else:
        norm_y = min(abs(y_in_Vol - y_cube), abs(y_out_Vol - y_cube))
    if z_in_Vol <= z_cube <= z_out_Vol:
        norm_z = 0
    else:
        norm_z = min(abs(z_in_Vol - z_cube), abs(z_out_Vol - z_cube))
    return norm_x + norm_y + norm_z

#Function to avoid overpopulation
def Omega(D_max, Theta):
    return np.minimum(np.maximum(D_max - Theta, 0)/ np.maximum(D_max, 0.001), 1)

#Function of the consumption of a soluble mediator 'sol' by an agent 
def Gamma(Gamma_sol_agent, K_sol_agent, m, C_sol):
    return Gamma_sol_agent * (C_sol**m)/(K_sol_agent**m + C_sol**m)

#All theta population are the full amount of cells in a specific zone
def Theta_LP(Model):
    return np.sum(Model['A_eDC_LP'], 0) + np.sum(Model['A_tDC_LP'], 0) + Model['A_ImDC_LP'] + Model['A_Mon_LP'] + Model['A_Mac_LP'] + np.sum(Model['A_TH17_LP'], 0) + np.sum(Model['A_Treg_LP'], 0) + np.sum(Model['A_sTH17_LP'], 0) + np.sum(Model['A_sTreg_LP'], 0) + Model['A_tTreg_LP'] + Model['A_ILC3'] + Model['A_Stro_LP']

def Theta_LP_cube(x, y, z, Model):
    return np.sum(Model['A_eDC_LP'][:, x, y, z]) + np.sum(Model['A_tDC_LP'][:, x, y, z]) + Model['A_ImDC_LP'][x][y][z] + Model['A_Mon_LP'][x][y][z] + Model['A_Mac_LP'][x][y][z] + np.sum(Model['A_TH17_LP'][:, x, y, z]) + np.sum(Model['A_Treg_LP'][:, x, y, z]) + np.sum(Model['A_sTH17_LP'][:, x, y, z]) + np.sum(Model['A_sTreg_LP'][:, x, y, z]) + Model['A_tTreg_LP'][x][y][z] + Model['A_ILC3'][x][y][z] + Model['A_Stro_LP'][x][y][z]

def Theta_MLN(Model):
    return np.sum(Model['A_eDC_MLN'], 0) + np.sum(Model['A_tDC_MLN'], 0) + np.sum(Model['A_nTc_MLN'], 0) + np.sum(Model['A_nTt_MLN'], 0) + np.sum(Model['A_nTe_MLN'], 0) + np.sum(Model['A_fTH17_MLN'], 0) + np.sum(Model['A_fTreg_MLN'], 0) + np.sum(Model['A_TH17_MLN'], 0) + np.sum(Model['A_Treg_MLN'], 0) + np.sum(Model['A_mTH17_MLN'], 0) + np.sum(Model['A_mTreg_MLN'], 0) + Model['A_Stro_MLN'] + Model['A_tTreg_MLN']        

def Theta_MLN_cube(x, y, z, Model):
    return np.sum(Model['A_eDC_MLN'][:][x][y][z]) + np.sum(Model['A_tDC_MLN'][:][x][y][z]) + np.sum(Model['A_nTc_MLN'][:][x][y][z]) + np.sum(Model['A_nTt_MLN'][:][x][y][z]) + np.sum(Model['A_nTe_MLN'][:][x][y][z]) + np.sum(Model['A_fTH17_MLN'][:][x][y][z]) + np.sum(Model['A_fTreg_MLN'][:][x][y][z]) + np.sum(Model['A_TH17_MLN'][:][x][y][z]) + np.sum(Model['A_Treg_MLN'][:][x][y][z]) + np.sum(Model['A_mTH17_MLN'][:][x][y][z]) + np.sum(Model['A_mTreg_MLN'][:][x][y][z]) + Model['A_Stro_MLN'][x][y][z] + Model['A_tTreg_MLN'][x][y][z]

def Theta_Epi(Model):
    return Model['A_sEpi'] + Model['A_Epi'] + A_IEL(Model)  

def Theta_Epi_cube(x, y, z, Model):
    return Model['A_sEpi'][x][y][z] + Model['A_Epi'][x][y][z] + A_IEL(Model)[x][y][z]

#C is the proportion of crypt not occupied by stem epithelial cells
def C(Model):
    return Model['Crypt_portion'] * Omega(Model['Crypt_portion'] * Model['D_max_Epi'], Model['A_sEpi']) / (1 - Model['Crypt_portion'] + Model['Crypt_portion'] * Omega(Model['Crypt_portion'] * Model['D_max_Epi'], Model['A_sEpi']))
                                                                                                           
def Theta_crypt(Model):
    return Model['A_sEpi'] + C(Model) * (Model['A_Epi'] + A_IEL(Model)) 

def Theta_Ag_Mac(Model):
    return Model['A_eAg_Mac_LP'] + Model['A_tAg_Mac_LP']  

def Theta_Ag_Epi(Model):
    return Model['A_eAg_Epi'] + Model['A_tAg_Epi'] 

def Theta_Ag_sEpi(Model):
    return Model['A_eAg_sEpi'] + Model['A_tAg_sEpi']                                                                                                      


#Agents and Soluble Mediators Specific Functions

#Phi functions describes differentiation rates    
def phi_nTe_Treg_prime(i, Model):
    return Model['phi_nTe_Treg_0'] * Gamma(Model['Gamma_IL2_nTe'], Model['K_IL2_nTe'], Model['m'], Model['C_IL2_MLN']) * (1 + Model['k_RA_phi'] * Gamma(Model['Gamma_eRA_nTe'], Model['K_eRA_nTe'], Model['m'], Model['C_eRA_MLN'][i, :, :, :]/np.maximum(Model['A_eDC_MLN'][i, :, :, :], 1))) * (1 - Model['a'][i])

def phi_nTe_TH17_prime(i, Model):
    return (Model['phi_nTe_TH17_IL6'] * Gamma(Model['Gamma_IL6_nTe'], Model['K_IL6_nTe'], Model['m'], Model['C_IL6_MLN']) + Model['phi_nTe_TH17_IL21'] * Gamma(Model['Gamma_IL21_nTe'], Model['K_IL21_nTe'], Model['m'], Model['C_IL21_MLN'])) * Model['a'][i] 

def phi_nTt_Treg_prime(i, Model):
    return Model['phi_nTt_Treg_0'] * Gamma(Model['Gamma_IL2_nTt'], Model['K_IL2_nTt'], Model['m'], Model['C_IL2_MLN']) * (1 + Model['k_RA_phi'] * Gamma(Model['Gamma_tRA_nTt'], Model['K_tRA_nTt'], Model['m'], Model['C_tRA_MLN'][i, :, :, :]/np.maximum(Model['A_tDC_MLN'][i, :, :, :], 1))) * (1 - Model['a'][i])

def phi_nTt_TH17_prime(i, Model):
    return (Model['phi_nTt_TH17_IL6'] * Gamma(Model['Gamma_IL6_nTt'], Model['K_IL6_nTt'], Model['m'], Model['C_IL6_MLN']) + Model['phi_nTt_TH17_IL21'] * Gamma(Model['Gamma_IL21_nTt'], Model['K_IL21_nTt'], Model['m'], Model['C_IL21_MLN'])) * Model['a'][i] 

def phi_nTe_Treg(i, Model):
    return phi_nTe_Treg_prime(i, Model) / np.maximum(phi_nTe_Treg_prime(i, Model) + phi_nTe_TH17_prime(i, Model), 0.001) 

def phi_nTe_TH17(i, Model):
    return phi_nTe_TH17_prime(i, Model) / np.maximum(phi_nTe_Treg_prime(i, Model) + phi_nTe_TH17_prime(i, Model), 0.001)

def phi_nTt_Treg(i, Model):
    return phi_nTt_Treg_prime(i, Model) / np.maximum(phi_nTt_Treg_prime(i, Model) + phi_nTt_TH17_prime(i, Model), 0.001) 

def phi_nTt_TH17(i, Model):
    return phi_nTt_TH17_prime(i, Model) / np.maximum(phi_nTt_Treg_prime(i, Model) + phi_nTt_TH17_prime(i, Model), 0.001)     

#n_eDC is the number of available spot on DC for binding with a T cell
def n_eDC_LP(Model):
    return Model['n_DC'] / (1 + Model['k_neDC_IL10'] * Gamma(Model['Gamma_IL10_eDC'], Model['K_IL10_eDC'], Model['m'], Model['C_IL10_LP']))

#n_mac is the number of available spot on mac for binding with an antigen
def n_Mac_LP(Model):
    return Model['n_Mac_0'] / (1 + Model['k_nMac_IL10'] * Gamma(Model['Gamma_IL10_Mac'], Model['K_IL10_Mac'], Model['m'], Model['C_IL10_LP']))

def n_eDC_MLN(Model):
    return Model['n_DC'] / (1 + Model['k_neDC_IL10'] * Gamma(Model['Gamma_IL10_eDC'], Model['K_IL10_eDC'], Model['m'], Model['C_IL10_MLN']))

#F describes the total number of spots were a T cell can bind to proliferate
def F_tot_TH17(i, Model):
    return Model['xi_TH17_DC'][i] * Model['n_DC'] * Model['A_tDC_LP'][i, :, :, :] + Model['xi_TH17_DC'][i] * n_eDC_LP(Model) * Model['A_tDC_LP'][i, :, :, :] + Model['xi_TH17_Mac'][i] * (Model['A_eAg_Mac_LP'][i, :, :, :] + Model['A_tAg_Mac_LP'][i, :, :, :]) + Model['xi_TH17_Epi'][i] * (Model['A_eAg_Epi'][i, :, :, :] + Model['A_tAg_Epi'][i, :, :, :]) + Model['xi_TH17_sEpi'][i] * (Model['A_eAg_sEpi'][i, :, :, :] + Model['A_eAg_sEpi'][i, :, :, :])

def F_tot_Treg(i, Model):
    return Model['xi_Treg_DC'][i] * Model['n_DC'] * Model['A_tDC_LP'][i, :, :, :] + Model['xi_Treg_DC'][i] * n_eDC_LP(Model) * Model['A_tDC_LP'][i, :, :, :] + Model['xi_Treg_Mac'][i] * (Model['A_eAg_Mac_LP'][i, :, :, :] + Model['A_tAg_Mac_LP'][i, :, :, :]) + Model['xi_Treg_Epi'][i] * (Model['A_eAg_Epi'][i, :, :, :] + Model['A_tAg_Epi'][i, :, :, :]) + Model['xi_Treg_sEpi'][i] * (Model['A_eAg_sEpi'][i, :, :, :] + Model['A_eAg_sEpi'][i, :, :, :])


#Epithelium, Damaging and Death Rates
    
def A_IEL(Model):
    return Model['IEL_fraction'] * (Model['A_Epi'] + Model['A_sEpi'])
    

def Damage_Epi(Model):
    return Model['D_mic']

def Mu_Epi(Model):
    return (Model['mu_Epi_0'] + Model['mu_mic'])

def Mu_sEpi(Model):
    return (Model['mu_sEpi_0'] + Model['mu_mic'])

def p_diff(Model):
    return Model['p_0'] * (1 + Model['k_sEpi_IL17'] * Gamma(Model['Gamma_IL17_sEpi'], Model['K_IL17_sEpi'], Model['m'], Model['C_IL17_LP']))

def p_stay(Model):
    return (1 - Model['p_0']) * (1 + Model['k_sEpi_IL10'] * Gamma(Model['Gamma_IL10_sEpi'], Model['K_IL10_sEpi'], Model['m'], Model['C_IL10_LP']))

def p(Model):
    return p_diff(Model) / (p_diff(Model) + p_stay(Model))

def lambda_sEpi(Model):
    return Model['lambda_sEpi_K'] * (1 + Model['k_sEpi_IL22'] * Gamma(Model['Gamma_IL22_sEpi'], Model['K_IL22_sEpi'], Model['m'], Model['C_IL22_LP']))

#RA Production (To change now constant)
        
def Pi_RA_LP_eDC(i):
    return 10

def Pi_RA_LP_tDC(i):
    return 10

def Pi_RA_MLN_eDC(i):
    return 5*10**3

def Pi_RA_MLN_tDC(i):
    return 5*10**3   
    
#Epithelium Production
        
# def Pi_SAA_Epi(Model):
#     return Model['Pi_SAA_Epi_0'] * (np.roll(np.sum(Model['A_eAg'], 0), 1, 0) + np.roll(np.sum(Model['A_tAg'], 0), 1, 0) + np.roll(np.sum(Model['A_eAg'], 0), -1, 0) + np.roll(np.sum(Model['A_tAg'], 0), -1, 0) + np.roll(np.sum(Model['A_eAg'], 0), 1, 1) + np.roll(np.sum(Model['A_tAg'], 0), 1, 1) + np.roll(np.sum(Model['A_eAg'], 0), -1, 1) + np.roll(np.sum(Model['A_tAg'], 0), -1, 1) + np.roll(np.sum(Model['A_eAg'], 0), 1, 2) + np.roll(np.sum(Model['A_tAg'], 0), -1, 2))

# def Pi_SAA_sEpi(Model):
#     return Model['Pi_SAA_sEpi_0'] * (np.roll(np.sum(Model['A_eAg'], 0), 1, 0) + np.roll(np.sum(Model['A_tAg'], 0), 1, 0) + np.roll(np.sum(Model['A_eAg'], 0), -1, 0) + np.roll(np.sum(Model['A_tAg'], 0), -1, 0) + np.roll(np.sum(Model['A_eAg'], 0), 1, 1) + np.roll(np.sum(Model['A_tAg'], 0), 1, 1) + np.roll(np.sum(Model['A_eAg'], 0), -1, 1) + np.roll(np.sum(Model['A_tAg'], 0), -1, 1) + np.roll(np.sum(Model['A_eAg'], 0), 1, 2) + np.roll(np.sum(Model['A_tAg'], 0), -1, 2))
###--- modified by RLim ---###
def Pi_SAA_Epi(Model):
    return Model['Pi_SAA_Epi_Cons'] * np.roll((np.sum(np.array([Model['Pi_SAA_Ag_Epi'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_eAg'], 0)), -1, 2) / (Model['K_Pi_Epi_SAA_Ag'] + + np.roll(np.sum(Model['A_eAg'], 0), 1, 2) + np.roll(np.sum(Model['A_tAg'], 0), -1, 2))

def Pi_SAA_sEpi(Model):
    return Model['Pi_SAA_sEpi_Cons'] * np.roll((np.sum(np.array([Model['Pi_SAA_Ag_sEpi'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_eAg'], 0)), -1, 2) / (Model['K_Pi_sEpi_SAA_Ag'] + + np.roll(np.sum(Model['A_eAg'], 0), 1, 2) + np.roll(np.sum(Model['A_tAg'], 0), -1, 2))
###--- modified by RLim ---###

def C_eRA_Epi():
    return 10

def C_tRA_Epi():
    return 10

def C_eRA_sEpi():
    return 10

def C_tRA_sEpi():
    return 10
        
#Lamina Propria################################################################
def Update_LP(Model, dt, t, L_out_TH17, L_out_Treg, VS_TH17_LP, VS_Treg_LP):        
    #Monocytes
    VA_Mon_LP = Model['A_Mon_LP'] + dt * (Omega(Model['D_max_LP'], Theta_LP(Model)) * (Model['Lambda_Mon_K'] + Model['Lambda_Mon_CCL2'] * Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['L_CCL2_ves'] * Model['C_CCL2_LP'])) * Model['Ind_Volume_blood_LP'] - Model['phi_Mon_Mac'] * Gamma(Model['Gamma_TGFBeta_Mon'], Model['K_TGFBeta_Mon'], Model['m'], Model['C_Csf2_LP']) * Model['A_Mon_LP'] - Model['mu_Mon'] * Model['A_Mon_LP'])
    #Macrophages
    VA_Mac_LP = Model['A_Mac_LP'] + dt * (Model['phi_Mon_Mac'] * Gamma(Model['Gamma_TGFBeta_Mon'], Model['K_TGFBeta_Mon'], Model['m'], Model['C_Csf2_LP']) * Model['A_Mon_LP'] - Model['mu_Mac'] * Model['A_Mac_LP'])
    #Immature Dendritic cells in the Lamina Propria
    VA_ImDC_LP = Model['A_ImDC_LP'] + dt * (Omega(Model['D_max_LP'], Theta_LP(Model)) * Model['Lambda_ImDC'] * Model['Ind_Volume_blood_LP'] - (Model['phi_ImDC_tDC_Ag_Mac'] * np.sum(Model['A_tAg_Mac_LP'], 0) + Model['phi_ImDC_tDC_Ag_Epi'] * np.sum(Model['A_tAg_Epi'], 0) + Model['phi_ImDC_tDC_Ag_sEpi'] * np.sum(Model['A_tAg_sEpi'], 0) + Model['phi_ImDC_eDC_Ag_Mac'] * np.sum(Model['A_eAg_Mac_LP'], 0) + Model['phi_ImDC_eDC_Ag_Epi'] * np.sum(Model['A_eAg_Epi'], 0) + Model['phi_ImDC_eDC_Ag_sEpi'] * np.sum(Model['A_eAg_sEpi'], 0)) * Model['A_ImDC_LP'] - Model['mu_ImDC'] * Model['A_ImDC_LP'] - Model['phi_ImDC_eDC_Ag'] * Model['A_ImDC_LP'] * Model['L_Epi_Ag'] * Omega(Model['D_max_Epi'] * Model['N_Epi'], Theta_Epi(Model)) * (np.roll(np.sum(Model['A_eAg'], 0), 1,0) + np.roll(np.sum(Model['A_eAg'], 0), -1,0) + np.roll(np.sum(Model['A_eAg'], 0), 1,1) + np.roll(np.sum(Model['A_eAg'], 0), -1, 1) + np.roll(np.sum(Model['A_eAg'], 0), 1,2)) - Model['phi_ImDC_tDC_Ag'] * Model['A_ImDC_LP'] * Model['L_Epi_Ag'] * Omega(Model['D_max_Epi'] * Model['N_Epi'], Theta_Epi(Model)) * (np.roll(np.sum(Model['A_tAg'], 0), 1,0) + np.roll(np.sum(Model['A_tAg'], 0), -1,0) + np.roll(np.sum(Model['A_tAg'], 0), 1,1) + np.roll(np.sum(Model['A_tAg'], 0), -1, 1) + np.roll(np.sum(Model['A_tAg'], 0), 1,2)))
    #TH17 in the Lamina Propria

    VA_TH17_LP = Model['A_TH17_LP'] + dt * (Omega(Model['D_max_Epi'], Theta_LP(Model)) * Model['lambda_TH17_0'] * [F_tot_TH17(i, Model) for i in range(Model['N_chemical'] + 1)] * Model['A_TH17_LP'] + Omega(Model['D_max_LP'], Theta_LP(Model)) * np.array([Model['Ind_Volume_blood_LP'] * Model['S_TH17_LP'][i] for i in range(Model['N_chemical'] + 1)]) * Model['M_inLP_mTH17'] / (Model['size_cube']**3 * Model['V_blood_LP']) - Model['mu_TH17_LP'] * Model['A_TH17_LP'] + Model['phi_Treg_TH17'] * Gamma(Model['Gamma_IL1Beta_23_Treg'], Model['K_IL1Beta_23_Treg'], Model['m'], Model['C_IL1Beta_23_LP']) * Model['A_Treg_LP'] - (Model['phi_TH17_Treg_TGFBeta'] * Gamma(Model['Gamma_TGFBeta_TH17'], Model['K_TGFBeta_TH17'], Model['m'], Model['C_TGFBeta_LP']) + Model['phi_TH17_Treg_RA'] * (Gamma(Model['Gamma_eRA_TH17'], Model['K_eRA_TH17'], Model['m'], (Model['C_eRA_LP']/np.maximum(Model['A_eDC_LP'], 1))) * n_eDC_LP(Model) * Model['A_eDC_LP'] + Gamma(Model['Gamma_tRA_TH17'], Model['K_tRA_TH17'], Model['m'], (Model['C_tRA_LP']/np.maximum(Model['A_tDC_LP'], 1))) * Model['n_DC'] * Model['A_tDC_LP']) + Model['phi_TH17_Treg_RA_Epi'] * (Gamma(Model['Gamma_eRA_Epi_TH17'], Model['K_eRA_Epi_TH17'], Model['m'], C_eRA_Epi()) * Model['A_eAg_Epi'] + Gamma(Model['Gamma_tRA_Epi_TH17'], Model['K_tRA_Epi_TH17'], Model['m'], C_tRA_Epi()) * Model['A_tAg_Epi']) + Model['phi_TH17_Treg_RA_sEpi'] * (Gamma(Model['Gamma_eRA_sEpi_TH17'], Model['K_eRA_sEpi_TH17'], Model['m'], C_eRA_sEpi()) * Model['A_eAg_sEpi'] + Gamma(Model['Gamma_tRA_sEpi_TH17'], Model['K_tRA_sEpi_TH17'], Model['m'], C_tRA_sEpi()) * Model['A_tAg_sEpi'])) * Model['A_TH17_LP'] - (Model['phi_TH17_sTH17_IL1Beta_23'] * Gamma(Model['Gamma_IL1Beta_23_TH17'], Model['K_IL1Beta_23_TH17'], Model['m'], Model['C_IL1Beta_23_LP'])) * Model['A_TH17_LP'])
    VA_sTH17_LP = Model['A_sTH17_LP'] + dt * (Omega(Model['D_max_LP'], Theta_LP(Model)) * Model['lambda_sTH17_0'] * [F_tot_TH17(i, Model) for i in range(Model['N_chemical'] + 1)] * Model['A_sTH17_LP'] - Model['mu_sTH17_LP'] * Model['A_sTH17_LP'] + (Model['phi_TH17_sTH17_IL1Beta_23'] * Gamma(Model['Gamma_IL1Beta_23_TH17'], Model['K_IL1Beta_23_TH17'], Model['m'], Model['C_IL1Beta_23_LP'])) * Model['A_TH17_LP'])
    
    VA_Treg_LP = Model['A_Treg_LP'] + dt * (Omega(Model['D_max_LP'], Theta_LP(Model)) * Model['lambda_Treg_0'] * [F_tot_Treg(i, Model) for i in range(Model['N_chemical'] + 1)] * Model['A_Treg_LP'] + Omega(Model['D_max_LP'], Theta_LP(Model)) * [Model['Ind_Volume_blood_LP'] * Model['S_Treg_LP'][i] for i in range(Model['N_chemical'] + 1)] * Model['M_inLP_mTreg'] / (Model['size_cube']**3 * Model['V_blood_LP']) - (Model['mu_Treg_LP'] / (1 + Model['k_IL2_muTreg'] * Gamma(Model['Gamma_IL2_Treg'], Model['K_IL2_Treg'], Model['m'], Model['C_IL2_LP']))) * Model['A_Treg_LP'] - Model['phi_Treg_TH17'] * Gamma(Model['Gamma_IL1Beta_23_Treg'], Model['K_IL1Beta_23_Treg'], Model['m'], Model['C_IL1Beta_23_LP']) * Model['A_Treg_LP'] + (Model['phi_TH17_Treg_TGFBeta'] * Gamma(Model['Gamma_TGFBeta_TH17'], Model['K_TGFBeta_TH17'], Model['m'], Model['C_TGFBeta_LP']) + Model['phi_TH17_Treg_RA'] * (Gamma(Model['Gamma_eRA_TH17'], Model['K_eRA_TH17'], Model['m'], (Model['C_eRA_LP']/np.maximum(Model['A_eDC_LP'], 1))) * n_eDC_LP(Model) * Model['A_eDC_LP'] + Gamma(Model['Gamma_tRA_TH17'], Model['K_tRA_TH17'], Model['m'], (Model['C_tRA_LP']/np.maximum(Model['A_tDC_LP'], 1))) * Model['n_DC'] * Model['A_tDC_LP']) + Model['phi_TH17_Treg_RA_Epi'] * (Gamma(Model['Gamma_eRA_Epi_TH17'], Model['K_eRA_Epi_TH17'], Model['m'], C_eRA_Epi()) * Model['A_eAg_Epi'] + Gamma(Model['Gamma_tRA_Epi_TH17'], Model['K_tRA_Epi_TH17'], Model['m'], C_tRA_Epi()) * Model['A_tAg_Epi']) + Model['phi_TH17_Treg_RA_sEpi'] * (Gamma(Model['Gamma_eRA_sEpi_TH17'], Model['K_eRA_sEpi_TH17'], Model['m'], C_eRA_sEpi()) * Model['A_eAg_sEpi'] + Gamma(Model['Gamma_tRA_sEpi_TH17'], Model['K_tRA_sEpi_TH17'], Model['m'], C_tRA_sEpi()) * Model['A_tAg_sEpi'])) * Model['A_TH17_LP'] - (Model['phi_Treg_sTreg_TGFBeta'] * Gamma(Model['Gamma_TGFBeta_Treg'], Model['K_TGFBeta_Treg'], Model['m'], Model['C_TGFBeta_LP']) + Model['phi_Treg_sTreg_RA'] * (Gamma(Model['Gamma_eRA_Treg'], Model['K_eRA_Treg'], Model['m'], (Model['C_eRA_LP']/np.maximum(Model['A_eDC_LP'], 1))) * n_eDC_LP(Model) * Model['A_eDC_LP'] + Gamma(Model['Gamma_tRA_Treg'], Model['K_tRA_Treg'], Model['m'], (Model['C_tRA_LP']/np.maximum(Model['A_tDC_LP'], 1))) * Model['n_DC'] * Model['A_tDC_LP']) + Model['phi_Treg_sTreg_RA_Epi'] * (Gamma(Model['Gamma_eRA_Epi_Treg'], Model['K_eRA_Epi_Treg'], Model['m'], C_eRA_Epi()) * Model['A_eAg_Epi'] + Gamma(Model['Gamma_tRA_Epi_Treg'], Model['K_tRA_Epi_Treg'], Model['m'], C_tRA_Epi()) * Model['A_tAg_Epi']) + Model['phi_Treg_sTreg_RA_sEpi'] * (Gamma(Model['Gamma_eRA_sEpi_Treg'], Model['K_eRA_sEpi_Treg'], Model['m'], C_eRA_sEpi()) * Model['A_eAg_sEpi'] + Gamma(Model['Gamma_tRA_sEpi_Treg'], Model['K_tRA_sEpi_Treg'], Model['m'], C_tRA_sEpi()) * Model['A_tAg_sEpi'])) * Model['A_Treg_LP'])       
    VA_sTreg_LP = Model['A_sTreg_LP'] + dt * (Omega(Model['D_max_LP'], Theta_LP(Model)) * Model['lambda_sTreg_0'] * [F_tot_Treg(i, Model) for i in range(Model['N_chemical'] + 1)] * Model['A_sTreg_LP'] - (Model['mu_sTreg_LP'] / (1 + Model['k_IL2_musTreg'] * Gamma(Model['Gamma_IL2_sTreg'], Model['K_IL2_sTreg'], Model['m'], Model['C_IL2_LP']))) * Model['A_sTreg_LP'] + (Model['phi_Treg_sTreg_TGFBeta'] * Gamma(Model['Gamma_TGFBeta_Treg'], Model['K_TGFBeta_Treg'], Model['m'], Model['C_TGFBeta_LP']) + Model['phi_Treg_sTreg_RA'] * (Gamma(Model['Gamma_eRA_Treg'], Model['K_eRA_Treg'], Model['m'], (Model['C_eRA_LP']/np.maximum(Model['A_eDC_LP'], 1))) * n_eDC_LP(Model) * Model['A_eDC_LP'] + Gamma(Model['Gamma_tRA_Treg'], Model['K_tRA_Treg'], Model['m'], (Model['C_tRA_LP']/np.maximum(Model['A_tDC_LP'], 1))) * Model['n_DC'] * Model['A_tDC_LP']) + Model['phi_Treg_sTreg_RA_Epi'] * (Gamma(Model['Gamma_eRA_Epi_Treg'], Model['K_eRA_Epi_Treg'], Model['m'], C_eRA_Epi()) * Model['A_eAg_Epi'] + Gamma(Model['Gamma_tRA_Epi_Treg'], Model['K_tRA_Epi_Treg'], Model['m'], C_tRA_Epi()) * Model['A_tAg_Epi']) + Model['phi_Treg_sTreg_RA_sEpi'] * (Gamma(Model['Gamma_eRA_sEpi_Treg'], Model['K_eRA_sEpi_Treg'], Model['m'], C_eRA_sEpi()) * Model['A_eAg_sEpi'] + Gamma(Model['Gamma_tRA_sEpi_Treg'], Model['K_tRA_sEpi_Treg'], Model['m'], C_tRA_sEpi()) * Model['A_tAg_sEpi'])) * Model['A_Treg_LP'])

    VA_eDC_LP = Model['A_eDC_LP'] + dt * (Model['phi_ImDC_eDC_Ag'] * Model['A_ImDC_LP'] * Model['L_Epi_Ag'] * Omega(Model['D_max_Epi'] * Model['N_Epi'], Theta_Epi(Model)) * (np.roll(Model['A_eAg'], 1,1) + np.roll(Model['A_eAg'], -1,1) + np.roll(Model['A_eAg'], 1,2) + np.roll(Model['A_eAg'], -1, 2) + np.roll(Model['A_eAg'], 1,3)) + Model['phi_ImDC_eDC_Ag_Mac'] * Model['A_ImDC_LP'] * Model['A_eAg_Mac_LP'] + Model['phi_ImDC_eDC_Ag_Epi'] * Model['A_ImDC_LP'] * Model['A_eAg_Epi'] + Model['phi_ImDC_eDC_Ag_sEpi'] * Model['A_ImDC_LP'] * Model['A_eAg_sEpi'] - Model['M_outLP_eDC'] * Model['Ind_Volume_Lymph_adj_LP'] * Model['A_eDC_LP'] - Model['mu_DC_LP'] * Model['A_eDC_LP'])
    VA_tDC_LP = Model['A_tDC_LP'] + dt * (Model['phi_ImDC_tDC_Ag'] * Model['A_ImDC_LP'] * Model['L_Epi_Ag'] * Omega(Model['D_max_Epi'] * Model['N_Epi'], Theta_Epi(Model)) * (np.roll(Model['A_tAg'], 1,1) + np.roll(Model['A_tAg'], -1,1) + np.roll(Model['A_tAg'], 1,2) + np.roll(Model['A_tAg'], -1, 2) + np.roll(Model['A_tAg'], 1,3)) + Model['phi_ImDC_tDC_Ag_Mac'] * Model['A_ImDC_LP'] * Model['A_tAg_Mac_LP'] + Model['phi_ImDC_tDC_Ag_Epi'] * Model['A_ImDC_LP'] * Model['A_tAg_Epi'] + Model['phi_ImDC_tDC_Ag_sEpi'] * Model['A_ImDC_LP'] * Model['A_tAg_sEpi'] - Model['M_outLP_tDC'] * Model['Ind_Volume_Lymph_adj_LP'] * Model['A_tDC_LP'] - Model['mu_DC_LP'] * Model['A_tDC_LP'])

    VC_eRA_LP = Model['C_eRA_LP'] + dt * ([Gamma(Model['Gamma_Csf2_eDC'], Model['K_Csf2_eDC'], Model['m'], Model['C_Csf2_LP']) * Pi_RA_LP_eDC(i) for i in range(Model['N_chemical'] + 1)]  * Model['A_eDC_LP'] - Model['M_outLP_eDC'] * Model['Ind_Volume_Lymph_adj_LP'] * Model['C_eRA_LP'] - Gamma(Model['Gamma_eRA_Treg'], Model['K_eRA_Treg'], Model['m'], (Model['C_eRA_LP']/np.maximum(Model['A_eDC_LP'], 1))) * n_eDC_LP(Model) * Model['A_eDC_LP'] * Model['A_Treg_LP'] - Gamma(Model['Gamma_eRA_TH17'], Model['K_eRA_TH17'], Model['m'], (Model['C_eRA_LP']/np.maximum(Model['A_eDC_LP'], 1))) * n_eDC_LP(Model) * Model['A_eDC_LP'] * Model['A_TH17_LP'] - (Model['c_delta_RA'] + Model['mu_DC_LP']) * Model['C_eRA_LP'])
    VC_tRA_LP = Model['C_tRA_LP'] + dt * ([Gamma(Model['Gamma_Csf2_tDC'], Model['K_Csf2_tDC'], Model['m'], Model['C_Csf2_LP']) * Pi_RA_LP_tDC(i) for i in range(Model['N_chemical'] + 1)]  * Model['A_tDC_LP'] - Model['M_outLP_tDC'] * Model['Ind_Volume_Lymph_adj_LP'] * Model['C_tRA_LP'] - Gamma(Model['Gamma_tRA_Treg'], Model['K_tRA_Treg'], Model['m'], (Model['C_tRA_LP']/np.maximum(Model['A_tDC_LP'], 1))) * Model['n_DC'] * Model['A_tDC_LP'] * Model['A_Treg_LP'] - Gamma(Model['Gamma_tRA_TH17'], Model['K_tRA_TH17'], Model['m'], (Model['C_tRA_LP']/np.maximum(Model['A_tDC_LP'], 1))) * Model['n_DC'] * Model['A_tDC_LP'] * Model['A_TH17_LP'] - (Model['c_delta_RA'] + Model['mu_DC_LP']) * Model['C_tRA_LP'])

    VA_eAg_Mac_LP = Model['A_eAg_Mac_LP'] + dt * (- Model['phi_ImDC_eDC_Ag_Mac'] * Model['A_ImDC_LP'] * Model['A_eAg_Mac_LP'] - (Model['mu_eAg_Mac'] + Model['mu_Mac']) * Model['A_eAg_Mac_LP'] + Omega(Model['D_max_LP'] * n_Mac_LP(Model), Theta_Ag_Mac(Model)) * (Model['xi_Mac_Ag'] * Model['A_Mac_LP'] * Model['L_Epi_Ag'] * Omega(Model['D_max_Epi'] * Model['N_Epi'], Theta_Epi(Model)) * (np.roll(Model['A_eAg'], 1,1) + np.roll(Model['A_eAg'], -1,1) + np.roll(Model['A_eAg'], 1,2) + np.roll(Model['A_eAg'], -1, 2) + np.roll(Model['A_eAg'], -1,3)) + Model['xi_Mac_Ag'] * Model['A_Mac_LP'] * (np.roll(Model['A_eAg'] / (Model['K_Ag_Mac'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), 1, 1) + np.roll(Model['A_eAg'] / (Model['K_Ag_Mac'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), -1, 1) + np.roll(Model['A_eAg'] / (Model['K_Ag_Mac'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), 1, 2) + np.roll(Model['A_eAg'] / (Model['K_Ag_Mac'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), -1, 2) + np.roll(Model['A_eAg'] / (Model['K_Ag_Mac'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), 1, 3)))) 
    VA_tAg_Mac_LP = Model['A_tAg_Mac_LP'] + dt * (- Model['phi_ImDC_tDC_Ag_Mac'] * Model['A_ImDC_LP'] * Model['A_tAg_Mac_LP'] - (Model['mu_tAg_Mac'] + Model['mu_Mac']) * Model['A_tAg_Mac_LP'] + Omega(Model['D_max_LP'] * n_Mac_LP(Model), Theta_Ag_Mac(Model)) * (Model['xi_Mac_Ag'] * Model['A_Mac_LP'] * Model['L_Epi_Ag'] * Omega(Model['D_max_Epi'] * Model['N_Epi'], Theta_Epi(Model)) * (np.roll(Model['A_tAg'], 1,1) + np.roll(Model['A_tAg'], -1,1) + np.roll(Model['A_tAg'], 1,2) + np.roll(Model['A_tAg'], -1, 2) + np.roll(Model['A_tAg'], -1,3)) + Model['xi_Mac_Ag'] * Model['A_Mac_LP'] * (np.roll(Model['A_tAg'] / (Model['K_Ag_Mac'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), 1, 1) + np.roll(Model['A_tAg'] / (Model['K_Ag_Mac'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), -1, 1) + np.roll(Model['A_tAg'] / (Model['K_Ag_Mac'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), 1, 2) + np.roll(Model['A_tAg'] / (Model['K_Ag_Mac'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), -1, 2) + np.roll(Model['A_tAg'] / (Model['K_Ag_Mac'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), 1, 3))))

    

    Sum_TH17_out_MLN = [0]*(Model['N_chemical'] + 1)
    Sum_Treg_out_MLN = [0]*(Model['N_chemical'] + 1)
    for i in range(Model['N_chemical'] + 1):
        for x in range(Model['x_out1_MLN'], Model['x_out2_MLN'] + 1):
            for y in range(Model['y_out1_MLN'], Model['y_out2_MLN'] + 1):
                for z in range(Model['z_out1_MLN'], Model['z_out2_MLN'] + 1):
                    Sum_TH17_out_MLN[i] += Model['M_outMLN_mTH17'] * Model['A_mTH17_MLN'][i, x, y, z]
                    Sum_Treg_out_MLN[i] += Model['M_outMLN_mTreg'] * Model['A_mTreg_MLN'][i, x, y, z]  
                      
    L_out_TH17.append(np.copy(Sum_TH17_out_MLN))
    L_out_Treg.append(np.copy(Sum_Treg_out_MLN))
    L_out_TH17.append(np.copy(Sum_TH17_out_MLN))
    L_out_Treg.append(np.copy(Sum_Treg_out_MLN))

    
        #New Tcells Coming
    if t > int(Model['delta_mTH17'] / dt):
        for i in range(Model['N_chemical'] + 1):
            Sum_TH17_in_LP = 0
            Sum_Treg_in_LP = 0
            for (x, y, z) in Model['Volume_blood_LP']:
                Sum_TH17_in_LP += Model['M_inLP_mTH17'] * Model['S_TH17_LP'][i] * Omega(Model['D_max_LP'], Theta_LP_cube(x, y, z, Model)) * Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['L_CCL25_ves'] * dt * Model['C_CCL25_LP'][x, y, z])
                Sum_Treg_in_LP += Model['M_inLP_mTreg'] * Model['S_Treg_LP'][i] * Omega(Model['D_max_LP'], Theta_LP_cube(x, y, z, Model)) * Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['L_CCL25_ves'] * dt * Model['C_CCL25_LP'][x, y, z])
            VS_TH17_LP[i] = Model['S_TH17_LP'][i] + dt * (L_out_TH17[t - int(Model['delta_mTH17'] / dt) - 1][i] * Model['size_cube']**3 * math.exp(- Model['mu_mTH17_T'] * Model['delta_mTH17']) - Sum_TH17_in_LP - Model['mu_mTH17_T'] * Model['S_TH17_LP'][i])
            VS_Treg_LP[i] = Model['S_Treg_LP'][i] + dt * (L_out_Treg[t - int(Model['delta_mTreg'] / dt) - 1][i] * Model['size_cube']**3 * math.exp(- Model['mu_mTreg_T'] * Model['delta_mTreg']) - Sum_Treg_in_LP - Model['mu_mTreg_T'] * Model['S_Treg_LP'][i])

    return([L_out_TH17, L_out_Treg, VA_Mon_LP, VA_Mac_LP, VA_ImDC_LP, VA_TH17_LP, VA_sTH17_LP, VA_Treg_LP, VA_sTreg_LP, VA_eDC_LP, VA_tDC_LP, VC_eRA_LP, VC_tRA_LP, VS_TH17_LP, VS_Treg_LP, VA_eAg_Mac_LP, VA_tAg_Mac_LP])
        
        #Mesenteric Lymph Node#########################################################
            
        #Dendritic Cells Coming
def Update_MLN(Model, dt, t, L_out_eDC, L_out_tDC, VS_eDC_MLN, VS_tDC_MLN):          
    Sum_eDC_out_LP = [0]*(Model['N_chemical'] + 1)
    Sum_tDC_out_LP = [0]*(Model['N_chemical'] + 1)
    for i in range(Model['N_chemical'] + 1):
        for (x, y, z) in Model['Volume_Lymph_adj_LP']:
            Sum_eDC_out_LP[i] += Model['M_outLP_eDC'] * Model['A_eDC_LP'][i, x, y, z]
            Sum_tDC_out_LP[i] += Model['M_outLP_tDC'] * Model['A_tDC_LP'][i, x, y, z]
            
    L_out_eDC.append(np.copy(Sum_eDC_out_LP))
    L_out_tDC.append(np.copy(Sum_tDC_out_LP))
    L_out_eDC.append(np.copy(Sum_eDC_out_LP))
    L_out_tDC.append(np.copy(Sum_tDC_out_LP))
    
    if t > int(Model['delta_DC'] / dt):
        for i in range(Model['N_chemical'] + 1):
            Sum_eDC_in_MLN = 0
            Sum_tDC_in_MLN = 0
            for x in range(Model['x_enter1_MLN'], Model['x_enter2_MLN'] + 1):
                for y in range(Model['y_enter1_MLN'], Model['y_enter2_MLN'] + 1):
                    for z in range(Model['z_enter1_MLN'], Model['z_enter2_MLN'] + 1):
                        Sum_eDC_in_MLN += Model['M_inMLN_eDC'] * Model['S_eDC_MLN'][i]
                        Sum_tDC_in_MLN += Model['M_inMLN_tDC'] * Model['S_tDC_MLN'][i]
            VS_eDC_MLN[i] = Model['S_eDC_MLN'][i] + dt * (L_out_eDC[t - int(Model['delta_DC'] / dt) - 1][i] * Model['size_cube']**3 * math.exp(- Model['mu_DC_T'] * Model['delta_DC']) - Sum_eDC_in_MLN - Model['mu_DC_T'] * Model['S_eDC_MLN'][i])
            VS_tDC_MLN[i] = Model['S_tDC_MLN'][i] + dt * (L_out_tDC[t - int(Model['delta_DC'] / dt) - 1][i] * Model['size_cube']**3 * math.exp(- Model['mu_DC_T'] * Model['delta_DC']) - Sum_tDC_in_MLN - Model['mu_DC_T'] * Model['S_tDC_MLN'][i])

    VA_eDC_MLN = Model['A_eDC_MLN'] + dt * (Omega(Model['D_max_MLN'], Theta_MLN(Model)) * Model['M_inMLN_eDC'] * [Model['Ind_Volume_vess_in_MLN'] * Model['S_eDC_MLN'][i] for i in range(Model['N_chemical'] + 1)] / (Model['Volume_vess_in_MLN'] * Model['size_cube']**3) - Model['mu_DC_MLN'] * Model['A_eDC_MLN'])
    F_eDC = n_eDC_MLN(Model) * Model['A_eDC_MLN'] - Model['A_nTe_MLN'] - Model['A_fTH17_MLN'] - Model['A_fTreg_MLN']
    VA_tDC_MLN = Model['A_tDC_MLN'] + dt * (Omega(Model['D_max_MLN'], Theta_MLN(Model)) * Model['M_inMLN_tDC'] * [Model['Ind_Volume_vess_in_MLN'] * Model['S_tDC_MLN'][i] for i in range(Model['N_chemical'] + 1)] / (Model['Volume_vess_in_MLN'] * Model['size_cube']**3) - Model['mu_DC_MLN'] * Model['A_tDC_MLN'])
    F_tDC = Model['n_DC'] * Model['A_tDC_MLN'] - Model['A_nTt_MLN'] - Model['A_fTH17_MLN'] - Model['A_fTreg_MLN']
    #Retinoic Acid in the Mesenteric Lymph Node
    VC_eRA_MLN = Model['C_eRA_MLN'] + dt * ([Model['Ind_Volume_vess_in_MLN'] * Pi_RA_MLN_eDC(i) * Model['S_eDC_MLN'][i] for i in range(Model['N_chemical'] + 1)] * Omega(Model['D_max_MLN'], Theta_MLN(Model)) * Model['M_inMLN_eDC'] / (Model['Volume_vess_in_MLN'] * Model['size_cube']**3) - Gamma(Model['Gamma_eRA_nTe'], Model['K_eRA_nTe'], Model['m'], Model['C_eRA_MLN']/np.maximum(Model['A_eDC_MLN'], 1)) * Model['A_nTe_MLN'] - Gamma(Model['Gamma_eRA_fTreg'], Model['K_eRA_fTreg'], Model['m'], Model['C_eRA_MLN']/np.maximum(Model['A_eDC_MLN'], 1)) * Model['A_fTreg_MLN'] - Gamma(Model['Gamma_eRA_fTH17'], Model['K_eRA_fTH17'], Model['m'], Model['C_eRA_MLN']/np.maximum(Model['A_eDC_MLN'], 1)) * Model['A_fTH17_MLN'] - (Model['c_delta_MLN_eRA'] + Model['mu_DC_MLN']) * Model['C_eRA_MLN'])
    VC_tRA_MLN = Model['C_tRA_MLN'] + dt * ([Model['Ind_Volume_vess_in_MLN'] * Pi_RA_MLN_tDC(i) * Model['S_tDC_MLN'][i] for i in range(Model['N_chemical'] + 1)] * Omega(Model['D_max_MLN'], Theta_MLN(Model)) * Model['M_inMLN_tDC'] / (Model['Volume_vess_in_MLN'] * Model['size_cube']**3) - Gamma(Model['Gamma_tRA_nTt'], Model['K_tRA_nTt'], Model['m'], Model['C_tRA_MLN']/np.maximum(Model['A_tDC_MLN'], 1)) * Model['A_nTt_MLN'] - Gamma(Model['Gamma_tRA_fTreg'], Model['K_tRA_fTreg'], Model['m'], Model['C_tRA_MLN']/np.maximum(Model['A_tDC_MLN'], 1)) * Model['A_fTreg_MLN'] - Gamma(Model['Gamma_tRA_fTH17'], Model['K_tRA_fTH17'], Model['m'], Model['C_tRA_MLN']/np.maximum(Model['A_tDC_MLN'], 1)) * Model['A_fTH17_MLN'] - (Model['c_delta_MLN_tRA'] + Model['mu_DC_MLN']) * Model['C_tRA_MLN'])
    #Naive T cells
    VA_nTc_MLN = Model['A_nTc_MLN'] + dt * (Omega(Model['D_max_MLN'], Theta_MLN(Model)) * Model['Lambda_nTc'] * Model['Ind_Volume_vess_in_MLN'] - Model['xi_nTc_DC_0'] * np.array([Model['xi_nTc_DC'][i] * F_eDC[i] for i in range(Model['N_chemical'] + 1)]) * Model['A_nTc_MLN'] /(Model['K_nTc'] + np.array([Model['xi_nTc_DC'][i] * (F_eDC[i] + F_tDC[i]) for i in range(Model['N_chemical'] + 1)])) - Model['xi_nTc_DC_0'] * np.array([Model['xi_nTc_DC'][i] * F_tDC[i] for i in range(Model['N_chemical'] + 1)]) * Model['A_nTc_MLN'] / (Model['K_nTc'] + np.array([Model['xi_nTc_DC'][i] * (F_eDC[i] + F_tDC[i]) for i in range(Model['N_chemical'] + 1)])) - Model['mu_nTc'] * Model['A_nTc_MLN'] + Model['mu_DC_MLN'] * Model['A_nTe_MLN'] + Model['mu_DC_MLN'] * Model['A_nTt_MLN'])
    VA_nTe_MLN = Model['A_nTe_MLN'] + dt * (Model['xi_nTc_DC_0'] * np.array([Model['xi_nTc_DC'][i] * F_eDC[i] for i in range(Model['N_chemical'] + 1)]) * Model['A_nTc_MLN'] /(Model['K_nTc'] + np.array([Model['xi_nTc_DC'][i] * (F_eDC[i] + F_tDC[i]) for i in range(Model['N_chemical'] + 1)])) - Model['phi_Tcell'] * Gamma(Model['Gamma_TGFBeta_nTe'], Model['K_TGFBeta_nTe'], Model['m'], Model['C_TGFBeta_MLN']) * Model['A_nTe_MLN'] - (Model['mu_DC_MLN'] + Model['mu_nTe']) * Model['A_nTe_MLN'])
    VA_nTt_MLN = Model['A_nTt_MLN'] + dt * (Model['xi_nTc_DC_0'] * np.array([Model['xi_nTc_DC'][i] * F_tDC[i] for i in range(Model['N_chemical'] + 1)]) * Model['A_nTc_MLN'] /(Model['K_nTc'] + np.array([Model['xi_nTc_DC'][i] * (F_eDC[i] + F_tDC[i]) for i in range(Model['N_chemical'] + 1)])) - Model['phi_Tcell'] * Gamma(Model['Gamma_TGFBeta_nTt'], Model['K_TGFBeta_nTt'], Model['m'], Model['C_TGFBeta_MLN']) * Model['A_nTt_MLN'] - (Model['mu_DC_MLN'] + Model['mu_nTt']) * Model['A_nTt_MLN'])
    #T cells in the Mesenteric Lymph Node
    VA_fTH17_MLN = Model['A_fTH17_MLN'] + dt * (Model['xi_TH17_DC_0'] * np.array([Model['xi_TH17_DC'][i] * F_eDC[i] for i in range(Model['N_chemical'] + 1)]) * Model['A_TH17_MLN'] /(Model['K_TH17'] + np.array([Model['xi_TH17_DC'][i] * (F_eDC[i] + F_tDC[i]) for i in range(Model['N_chemical'] + 1)])) + Model['xi_TH17_DC_0'] * np.array([Model['xi_TH17_DC'][i] * F_tDC[i] for i in range(Model['N_chemical'] + 1)]) * Model['A_TH17_MLN'] /(Model['K_TH17'] + np.array([Model['xi_TH17_DC'][i] * (F_eDC[i] + F_tDC[i]) for i in range(Model['N_chemical'] + 1)])) + np.array([phi_nTe_TH17(i, Model) * Gamma(Model['Gamma_TGFBeta_nTe'], Model['K_TGFBeta_nTe'], Model['m'], Model['C_TGFBeta_MLN']) for i in range(Model['N_chemical'] + 1)]) * Model['phi_Tcell'] * Model['A_nTe_MLN'] + np.array([phi_nTt_TH17(i, Model) * Gamma(Model['Gamma_TGFBeta_nTt'], Model['K_TGFBeta_nTt'], Model['m'], Model['C_TGFBeta_MLN']) for i in range(Model['N_chemical'] + 1)]) * Model['phi_Tcell'] * Model['A_nTt_MLN'] - Model['barXi_DC_fTH17'] * Model['A_fTH17_MLN'] - (Model['mu_DC_MLN'] + Model['mu_fTH17']) * Model['A_fTH17_MLN'] + Omega(Model['D_max_MLN'], Theta_MLN(Model)) * Model['lambda_fTH17_0'] * Gamma(Model['Gamma_IL21_fTH17'], Model['K_IL21_fTH17'], Model['m'], Model['C_IL21_MLN']) * (F_eDC / (np.maximum(1, Model['n_DC'] * Model['A_eDC_MLN'])) + F_tDC / (np.maximum(1, Model['n_DC'] * Model['A_tDC_MLN']))) * Model['A_fTH17_MLN'])
    VA_fTreg_MLN = Model['A_fTreg_MLN'] + dt * (Model['xi_Treg_DC_0'] * np.array([Model['xi_Treg_DC'][i] * F_eDC[i] for i in range(Model['N_chemical'] + 1)]) * Model['A_Treg_MLN'] /(Model['K_Treg'] + np.array([Model['xi_Treg_DC'][i] * (F_eDC[i] + F_tDC[i]) for i in range(Model['N_chemical'] + 1)])) + Model['xi_Treg_DC_0'] * np.array([Model['xi_Treg_DC'][i] * F_tDC[i] for i in range(Model['N_chemical'] + 1)]) * Model['A_Treg_MLN'] /(Model['K_Treg'] + np.array([Model['xi_Treg_DC'][i] * (F_eDC[i] + F_tDC[i]) for i in range(Model['N_chemical'] + 1)])) + np.array([phi_nTe_Treg(i, Model) * Gamma(Model['Gamma_TGFBeta_nTe'], Model['K_TGFBeta_nTe'], Model['m'], Model['C_TGFBeta_MLN']) for i in range(Model['N_chemical'] + 1)]) * Model['phi_Tcell'] * Model['A_nTe_MLN'] + np.array([phi_nTt_Treg(i, Model) * Gamma(Model['Gamma_TGFBeta_nTt'], Model['K_TGFBeta_nTt'], Model['m'], Model['C_TGFBeta_MLN']) for i in range(Model['N_chemical'] + 1)]) * Model['phi_Tcell'] * Model['A_nTt_MLN'] - Model['barXi_DC_fTreg'] * Model['A_fTreg_MLN'] - (Model['mu_DC_MLN'] + Model['mu_fTreg']) * Model['A_fTreg_MLN'])   
    VA_TH17_MLN = Model['A_TH17_MLN'] + dt * (Model['barXi_DC_fTH17'] * (1 - Model['phi_fTH17_mTH17'] * (Gamma(Model['Gamma_eRA_fTH17'], Model['K_eRA_fTH17'], Model['m'], Model['C_eRA_MLN']/np.maximum(Model['A_eDC_MLN'], 1)) + Gamma(Model['Gamma_tRA_fTH17'], Model['K_tRA_fTH17'], Model['m'], Model['C_tRA_MLN']/np.maximum(Model['A_tDC_MLN'], 1)))) * Model['A_fTH17_MLN'] + Model['mu_DC_MLN'] * (1 - Model['phi_fTH17_mTH17'] * (Gamma(Model['Gamma_eRA_fTH17'], Model['K_eRA_fTH17'], Model['m'], Model['C_eRA_MLN']/np.maximum(Model['A_eDC_MLN'], 1)) + Gamma(Model['Gamma_tRA_fTH17'], Model['K_tRA_fTH17'], Model['m'], Model['C_tRA_MLN']/np.maximum(Model['A_tDC_MLN'], 1)))) * Model['A_fTH17_MLN'] - Model['xi_TH17_DC_0'] * np.array([Model['xi_TH17_DC'][i] * F_eDC[i] for i in range(Model['N_chemical'] + 1)]) * Model['A_TH17_MLN'] /(Model['K_TH17'] + np.array([Model['xi_TH17_DC'][i] * (F_eDC[i] + F_tDC[i]) for i in range(Model['N_chemical'] + 1)])) - Model['xi_TH17_DC_0'] * np.array([Model['xi_TH17_DC'][i] * F_tDC[i] for i in range(Model['N_chemical'] + 1)]) * Model['A_TH17_MLN'] /(Model['K_TH17'] + np.array([Model['xi_TH17_DC'][i] * (F_eDC[i] + F_tDC[i]) for i in range(Model['N_chemical'] + 1)])) - Model['mu_TH17'] * Model['A_TH17_MLN'])
    VA_Treg_MLN = Model['A_Treg_MLN'] + dt * (Model['barXi_DC_fTreg'] * (1 - Model['phi_fTreg_mTreg'] * (Gamma(Model['Gamma_eRA_fTreg'], Model['K_eRA_fTreg'], Model['m'], Model['C_eRA_MLN']/np.maximum(Model['A_eDC_MLN'], 1)) + Gamma(Model['Gamma_tRA_fTreg'], Model['K_tRA_fTreg'], Model['m'], Model['C_tRA_MLN']/np.maximum(Model['A_tDC_MLN'], 1)))) * Model['A_fTreg_MLN'] + Model['mu_DC_MLN'] * (1 - Model['phi_fTreg_mTreg'] * (Gamma(Model['Gamma_eRA_fTreg'], Model['K_eRA_fTreg'], Model['m'], Model['C_eRA_MLN']/np.maximum(Model['A_eDC_MLN'], 1)) + Gamma(Model['Gamma_tRA_fTreg'], Model['K_tRA_fTreg'], Model['m'], Model['C_tRA_MLN']/np.maximum(Model['A_tDC_MLN'], 1)))) * Model['A_fTreg_MLN'] - Model['xi_Treg_DC_0'] * np.array([Model['xi_Treg_DC'][i] * F_eDC[i] for i in range(Model['N_chemical'] + 1)]) * Model['A_Treg_MLN'] /(Model['K_Treg'] + np.array([Model['xi_Treg_DC'][i] * (F_eDC[i] + F_tDC[i]) for i in range(Model['N_chemical'] + 1)])) - Model['xi_Treg_DC_0'] * np.array([Model['xi_Treg_DC'][i] * F_tDC[i] for i in range(Model['N_chemical'] + 1)]) * Model['A_Treg_MLN'] /(Model['K_Treg'] + np.array([Model['xi_Treg_DC'][i] * (F_eDC[i] + F_tDC[i]) for i in range(Model['N_chemical'] + 1)])) - Model['mu_Treg'] * Model['A_Treg_MLN'])
        
    VA_mTH17_MLN = Model['A_mTH17_MLN'] + dt * (Model['barXi_DC_fTH17'] * Model['phi_fTH17_mTH17'] * (Gamma(Model['Gamma_eRA_fTH17'], Model['K_eRA_fTH17'], Model['m'], Model['C_eRA_MLN']/np.maximum(Model['A_eDC_MLN'], 1)) + Gamma(Model['Gamma_tRA_fTH17'], Model['K_tRA_fTH17'], Model['m'], Model['C_tRA_MLN']/np.maximum(Model['A_tDC_MLN'], 1))) * Model['A_fTH17_MLN'] + Model['mu_DC_MLN'] * Model['phi_fTH17_mTH17'] * (Gamma(Model['Gamma_eRA_fTH17'], Model['K_eRA_fTH17'], Model['m'], Model['C_eRA_MLN']) + Gamma(Model['Gamma_tRA_fTH17'], Model['K_tRA_fTH17'], Model['m'], Model['C_tRA_MLN'])) * Model['A_fTH17_MLN'] - Model['mu_mTH17'] * Model['A_mTH17_MLN'] - Model['M_outMLN_mTH17'] * Model['A_mTH17_MLN'] * Model['Ind_Volume_vess_out_MLN'])
    VA_mTreg_MLN = Model['A_mTreg_MLN'] + dt * (Model['barXi_DC_fTreg'] * Model['phi_fTreg_mTreg'] * (Gamma(Model['Gamma_eRA_fTreg'], Model['K_eRA_fTreg'], Model['m'], Model['C_eRA_MLN']/np.maximum(Model['A_eDC_MLN'], 1)) + Gamma(Model['Gamma_tRA_fTreg'], Model['K_tRA_fTreg'], Model['m'], Model['C_tRA_MLN']/np.maximum(Model['A_tDC_MLN'], 1))) * Model['A_fTreg_MLN'] + Model['mu_DC_MLN'] * Model['phi_fTreg_mTreg'] * (Gamma(Model['Gamma_eRA_fTreg'], Model['K_eRA_fTreg'], Model['m'], Model['C_eRA_MLN']) + Gamma(Model['Gamma_tRA_fTreg'], Model['K_tRA_fTreg'], Model['m'], Model['C_tRA_MLN'])) * Model['A_fTreg_MLN'] - Model['mu_mTreg'] * Model['A_mTreg_MLN'] - Model['M_outMLN_mTreg'] * Model['A_mTreg_MLN'] * Model['Ind_Volume_vess_out_MLN'])
        

    return([L_out_eDC, L_out_tDC, VS_eDC_MLN, VS_tDC_MLN, VA_eDC_MLN, VA_tDC_MLN, VA_nTc_MLN, VA_nTe_MLN, VA_nTt_MLN, VA_TH17_MLN, VA_Treg_MLN, VA_mTH17_MLN, VA_mTreg_MLN, VA_fTH17_MLN, VA_fTreg_MLN, VC_eRA_MLN, VC_tRA_MLN])
      
            
        ###############################################################################
        #Soluble Mediators Time Dynamics
        ###############################################################################
            
        #Lamina Propria################################################################
def Update_LP_Cyt(Model, dt, t):        
    
    VC_IL10_LP = Model['C_IL10_LP'] + dt * (Model['Pi_IL10_Treg'] * (1 + Model['k_Pi_auto_IL10'] * Gamma(Model['Gamma_IL10_Treg'], Model['K_IL10_Treg'], Model['m'], Model['C_IL10_LP'])) * np.sum(Model['A_Treg_LP'], 0) + Model['Pi_IL10_sTreg'] * (1 + Model['k_Pi_auto_IL10'] * Gamma(Model['Gamma_IL10_sTreg'], Model['K_IL10_sTreg'], Model['m'], Model['C_IL10_LP'])) * np.sum(Model['A_sTreg_LP'], 0) + Model['Pi_IL10_tTreg'] * (1 + Model['k_Pi_auto_IL10'] * Gamma(Model['Gamma_IL10_tTreg'], Model['K_IL10_Treg'], Model['m'], Model['C_IL10_LP'])) * Model['A_tTreg_LP'] + Model['Pi_IL10_Mac'] * Model['A_Mac_LP'] + np.sum(np.array([Model['Pi_IL10_Mac_Ag'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_tAg_Mac_LP'], 0) + Model['Pi_IL10_IEL'] * A_IEL(Model) - Gamma(Model['Gamma_IL10_eDC'], Model['K_IL10_eDC'], Model['m'], Model['C_IL10_LP']) * np.sum(Model['A_eDC_LP'], 0) - Gamma(Model['Gamma_IL10_Mac'], Model['K_IL10_Mac'], Model['m'], Model['C_IL10_LP']) * Model['A_Mac_LP'] - Gamma(Model['Gamma_IL10_TH17'], Model['K_IL10_TH17'], Model['m'], Model['C_IL10_LP']) * np.sum(Model['A_TH17_LP'], 0) - Gamma(Model['Gamma_IL10_Treg'], Model['K_IL10_Treg'], Model['m'], Model['C_IL10_LP']) * np.sum(Model['A_Treg_LP'], 0) - Gamma(Model['Gamma_IL10_sTreg'], Model['K_IL10_sTreg'], Model['m'], Model['C_IL10_LP']) * np.sum(Model['A_sTreg_LP'], 0) - Gamma(Model['Gamma_IL10_tTreg'], Model['K_IL10_tTreg'], Model['m'], Model['C_IL10_LP']) * Model['A_tTreg_LP'] - Gamma(Model['Gamma_IL10_sTH17'], Model['K_IL10_sTH17'], Model['m'], Model['C_IL10_LP']) * np.sum(Model['A_sTH17_LP'], 0) - Gamma(Model['Gamma_IL10_sEpi'], Model['K_IL10_sEpi'], Model['m'], Model['C_IL10_LP']) * Model['A_sEpi'] - Model['c_delta_IL10'] * Model['C_IL10_LP']) 
    
    VC_TGFBeta_LP = Model['C_TGFBeta_LP'] + dt * (np.sum(np.array([Model['Pi_TGFBeta_eDC'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_eDC_LP'], 0) + np.sum(np.array([Model['Pi_TGFBeta_tDC'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_tDC_LP'], 0) + Model['Pi_TGFBeta_Mac'] * Model['A_Mac_LP'] +  np.sum(np.array([Model['Pi_TGFBeta_Mac_Ag'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_eAg_Mac_LP'], 0) + np.sum(np.array([Model['Pi_TGFBeta_Mac_Ag'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_tAg_Mac_LP'], 0) + Model['Ind_Top'] * (Model['Pi_TGFBeta_Epi'] * Model['A_Epi'] + np.sum(np.array([Model['Pi_TGFBeta_Epi_Ag'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_eAg_Epi'], 0) + np.sum(np.array([Model['Pi_TGFBeta_Epi_Ag'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_tAg_Epi'], 0)) + Model['Pi_TGFBeta_Stro'] * Model['A_Stro_LP'] - Gamma(Model['Gamma_TGFBeta_TH17'], Model['K_TGFBeta_TH17'], Model['m'], Model['C_TGFBeta_LP']) * np.sum(Model['A_TH17_LP'], 0) - Gamma(Model['Gamma_TGFBeta_Treg'], Model['K_TGFBeta_Treg'], Model['m'], Model['C_TGFBeta_LP']) * np.sum(Model['A_Treg_LP'], 0) - Gamma(Model['Gamma_TGFBeta_Mon'], Model['K_TGFBeta_Mon'], Model['m'], Model['C_TGFBeta_LP']) * Model['A_Mon_LP'] - Model['c_delta_TGFBeta'] * Model['C_TGFBeta_LP'])
    
    VC_IL17_LP = Model['C_IL17_LP'] + dt * ((Model['Pi_IL17_TH17'] * (1 + Model['k_Pi_IL17_SAA_TH17'] * Gamma(Model['Gamma_SAA_TH17'], Model['K_SAA_TH17'], Model['m'], Model['C_SAA_LP'])) / (1 + Model['k_Pi_IL17_IL10_TH17'] * Gamma(Model['Gamma_IL10_TH17'], Model['K_IL10_TH17'], Model['m'], Model['C_IL10_LP']))) * np.sum(Model['A_TH17_LP'], 0) + (Model['Pi_IL17_sTH17'] * (1 + Model['k_Pi_IL17_SAA_TH17'] * Gamma(Model['Gamma_SAA_TH17'], Model['K_SAA_TH17'], Model['m'], Model['C_SAA_LP'])) / (1 + Model['k_Pi_IL17_IL10_sTH17'] * Gamma(Model['Gamma_IL10_sTH17'], Model['K_IL10_sTH17'], Model['m'], Model['C_IL10_LP']))) * np.sum(Model['A_sTH17_LP'], 0) - Gamma(Model['Gamma_IL17_sEpi'], Model['K_IL17_sEpi'], Model['m'], Model['C_IL17_LP']) * Model['A_sEpi'] - Gamma(Model['Gamma_IL17_Epi'], Model['K_IL17_Epi'], Model['m'], Model['C_IL17_LP']) * Model['A_Epi'] - Model['c_delta_IL17'] * Model['C_IL17_LP'])        
    
    VC_IL22_LP = Model['C_IL22_LP'] + dt * (Model['Pi_IL22_ILC3'] * Gamma(Model['Gamma_IL1Beta_23_ILC3'], Model['K_IL1Beta_23_ILC3'], Model['m'], Model['C_IL1Beta_23_LP']) * Model['A_ILC3'] + Model['Pi_IL22_sTH17'] * np.sum(Model['A_sTH17_LP'], 0) - Gamma(Model['Gamma_IL22_sEpi'], Model['K_IL22_sEpi'], Model['m'], Model['C_IL22_LP']) * Model['A_sEpi'] - Gamma(Model['Gamma_IL22_Epi'], Model['K_IL22_Epi'], Model['m'], Model['C_IL22_LP']) * Model['A_Epi'] - Model['c_delta_IL22'] * Model['C_IL22_LP'])
    
    VC_IL2_LP = Model['C_IL2_LP'] + dt * (Model['Pi_IL2_ILC3'] * Gamma(Model['Gamma_IL1Beta_23_ILC3'], Model['K_IL1Beta_23_ILC3'], Model['m'], Model['C_IL1Beta_23_LP']) * Model['A_ILC3'] + np.sum(np.array([Model['Pi_IL2_eDC'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_eDC_LP'], 0) + np.sum(np.array([Model['Pi_IL2_tDC'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_tDC_LP'], 0) - Gamma(Model['Gamma_IL2_Treg'], Model['K_IL2_Treg'], Model['m'], Model['C_IL2_LP']) * np.sum(Model['A_Treg_LP'], 0) - Gamma(Model['Gamma_IL2_sTreg'], Model['K_IL2_sTreg'], Model['m'], Model['C_IL2_LP']) * np.sum(Model['A_sTreg_LP'], 0) - Gamma(Model['Gamma_IL2_tTreg'], Model['K_IL2_tTreg'], Model['m'], Model['C_IL2_LP']) * Model['A_tTreg_LP'] - Model['c_delta_IL2'] * Model['C_IL2_LP'])    
    
    VC_CCL2_LP = Model['C_CCL2_LP'] + dt * (Model['Pi_CCL2_Mac'] * Model['A_Mac_LP'] + np.sum(np.array([Model['Pi_CCL2_Mac_Ag'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_eAg_Mac_LP'], 0) + np.sum(np.array([Model['Pi_CCL2_Mac_Ag'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_tAg_Mac_LP'], 0) - Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['C_CCL2_LP']) * Model['A_Mon_LP'] - Model['L_CCL2_ves'] * Model['C_CCL2_LP'] - Model['c_delta_CCL2'] * Model['C_CCL2_LP'])
    
    VC_CCL25_LP = Model['C_CCL25_LP'] + dt * (Model['Pi_CCL25_Epi'] * Model['A_Epi'] + np.sum(np.array([Model['Pi_CCL25_Epi_Ag'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_eAg_Epi'], 0) + np.sum(np.array([Model['Pi_CCL25_Epi_Ag'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_tAg_Epi'], 0) + Model['Pi_CCL25_sEpi'] * Model['A_sEpi'] + np.sum(np.array([Model['Pi_CCL25_sEpi_Ag'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_eAg_sEpi'], 0) + np.sum(np.array([Model['Pi_CCL25_sEpi_Ag'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_tAg_sEpi'], 0) - Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP']) * np.sum(Model['A_Treg_LP'], 0) - Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP']) * np.sum(Model['A_sTreg_LP'], 0) - Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP']) * np.sum(Model['A_TH17_LP'], 0) - Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP']) * np.sum(Model['A_sTH17_LP'], 0) - Model['L_CCL25_ves'] * Model['C_CCL25_LP'] - Model['c_delta_CCL25'] * Model['C_CCL25_LP'])
    
    VC_IL1Beta_23_LP = Model['C_IL1Beta_23_LP'] + dt * (((1 + Model['k_Pi_IL1Beta_23_SAA_Mac'] * Gamma(Model['Gamma_SAA_Mac'], Model['K_SAA_Mac'], Model['m'], Model['C_SAA_LP']))/(1 + Model['k_Pi_IL1Beta_23_IL10_Mac'] * Gamma(Model['Gamma_IL10_Mac'], Model['K_IL10_Mac'], Model['m'], Model['C_IL10_LP']))) * Model['Pi_IL1Beta_23_Mac'] * Model['A_Mac_LP'] + np.sum(np.array([Model['Pi_IL1Beta_23_Mac_Ag'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_eAg_Mac_LP'], 0) / (1 + Model['k_Pi_IL1Beta_23_IL10_Mac'] * Gamma(Model['Gamma_IL10_Mac'], Model['K_IL10_Mac'], Model['m'], Model['C_IL10_LP'])) - Gamma(Model['Gamma_IL1Beta_23_ILC3'], Model['K_IL1Beta_23_ILC3'], Model['m'], Model['C_IL1Beta_23_LP']) * Model['A_ILC3'] - Gamma(Model['Gamma_IL1Beta_23_TH17'], Model['K_IL1Beta_23_TH17'], Model['m'], Model['C_IL1Beta_23_LP']) * np.sum(Model['A_TH17_LP'], 0) - Gamma(Model['Gamma_IL1Beta_23_Treg'], Model['K_IL1Beta_23_Treg'], Model['m'], Model['C_IL1Beta_23_LP']) * np.sum(Model['A_Treg_LP'], 0) - Model['c_delta_IL1Beta_23'] * Model['C_IL1Beta_23_LP'])
    
    VC_Csf2_LP = Model['C_Csf2_LP'] + dt * (Model['Pi_Csf2_ILC3'] * Model['A_ILC3'] - Gamma(Model['Gamma_Csf2_eDC'], Model['K_Csf2_eDC'], Model['m'], Model['C_Csf2_LP']) * np.sum(Model['A_eDC_LP'], 0) - Gamma(Model['Gamma_Csf2_tDC'], Model['K_Csf2_tDC'], Model['m'], Model['C_Csf2_LP']) * np.sum(Model['A_tDC_LP'], 0) - Model['c_delta_Csf2'] * Model['C_Csf2_LP'])
    
    VC_SAA_LP = Model['C_SAA_LP'] + dt * ( - Gamma(Model['Gamma_SAA_TH17'], Model['K_SAA_TH17'], Model['m'], Model['C_SAA_LP']) * np.sum(Model['A_TH17_LP'], 0) - Gamma(Model['Gamma_SAA_sTH17'], Model['K_SAA_sTH17'], Model['m'], Model['C_SAA_LP']) * np.sum(Model['A_sTH17_LP'], 0) - Gamma(Model['Gamma_SAA_Mac'], Model['K_SAA_Mac'], Model['m'], Model['C_SAA_LP']) * Model['A_Mac_LP'] - Model['c_delta_SAA'] * Model['C_SAA_LP'] + (1 + Model['k_IL22_SAA_Epi'] * Gamma(Model['Gamma_IL22_Epi'], Model['K_IL22_Epi'], Model['m'], Model['C_IL22_LP'])) * (np.sum(np.array([Model['Pi_SAA_Epi_Ag'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_eAg_Epi'], 0)) + (1 + Model['k_IL22_SAA_sEpi'] * Gamma(Model['Gamma_IL22_sEpi'], Model['K_IL22_sEpi'], Model['m'], Model['C_IL22_LP'])) * np.sum(np.array([Model['Pi_SAA_sEpi_Ag'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_eAg_sEpi'], 0) + (1 + Model['k_IL22_SAA_Epi'] * Gamma(Model['Gamma_IL22_Epi'], Model['K_IL22_Epi'], Model['m'], Model['C_IL22_LP'])) * Pi_SAA_Epi(Model) * Model['A_Epi'] + (1 + Model['k_IL22_SAA_sEpi'] * Gamma(Model['Gamma_IL22_sEpi'], Model['K_IL22_sEpi'], Model['m'], Model['C_IL22_LP'])) * Pi_SAA_sEpi(Model) * Model['A_sEpi'])

    return([VC_IL10_LP, VC_TGFBeta_LP, VC_IL17_LP, VC_IL22_LP, VC_IL2_LP, VC_CCL2_LP, VC_CCL25_LP, VC_IL1Beta_23_LP, VC_Csf2_LP, VC_SAA_LP])
    
        #Mesenteric Lymph Node#########################################################
def Update_MLN_Cyt(Model, dt, t):        
        
    VC_IL21_MLN = Model['C_IL21_MLN'] + dt * (Model['Pi_IL21_TH17'] * np.sum(Model['A_TH17_MLN'], 0) + Model['Pi_IL21_fTH17'] * np.sum(Model['A_fTH17_MLN'], 0) + Model['Pi_IL21_mTH17'] * np.sum(Model['A_mTH17_MLN'], 0) - Gamma(Model['Gamma_IL21_nTe'], Model['K_IL21_nTe'], Model['m'], Model['C_IL21_MLN']) * np.sum(Model['A_nTe_MLN'], 0) - Gamma(Model['Gamma_IL21_nTt'], Model['K_IL21_nTt'], Model['m'], Model['C_IL21_MLN']) * np.sum(Model['A_nTt_MLN'], 0) - Gamma(Model['Gamma_IL21_fTH17'], Model['K_IL21_fTH17'], Model['m'], Model['C_IL21_MLN']) * np.sum(Model['A_fTH17_MLN'], 0) - Model['c_delta_IL21'] * Model['C_IL21_MLN'])
    VC_IL2_MLN = Model['C_IL2_MLN'] + dt * (np.sum(np.array([Model['Pi_IL2_eDC'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_eDC_MLN'], 0) + np.sum(np.array([Model['Pi_IL2_tDC'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_tDC_MLN'], 0) - Gamma(Model['Gamma_IL2_nTe'], Model['K_IL2_nTe'], Model['m'], Model['C_IL2_MLN']) * np.sum(Model['A_nTe_MLN'], 0) - Gamma(Model['Gamma_IL2_nTt'], Model['K_IL2_nTt'], Model['m'], Model['C_IL2_MLN']) * np.sum(Model['A_nTt_MLN'], 0) - Gamma(Model['Gamma_IL2_Treg'], Model['K_IL2_Treg'], Model['m'], Model['C_IL2_MLN']) * np.sum(Model['A_Treg_MLN'], 0) - Gamma(Model['Gamma_IL2_mTreg'], Model['K_IL2_mTreg'], Model['m'], Model['C_IL2_MLN']) * np.sum(Model['A_mTreg_MLN'], 0) - Gamma(Model['Gamma_IL2_fTreg'], Model['K_IL2_mTreg'], Model['m'], Model['C_IL2_MLN']) * np.sum(Model['A_mTreg_MLN'], 0) - Gamma(Model['Gamma_IL2_tTreg'], Model['K_IL2_tTreg'], Model['m'], Model['C_IL2_MLN']) * Model['A_tTreg_MLN'] - Model['c_delta_IL2'] * Model['C_IL2_MLN'])    
    VC_IL6_MLN = Model['C_IL6_MLN'] + dt * (np.sum(np.array([Model['Pi_IL6_eDC'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_eDC_MLN'], 0) / (1 + Model['k_Pi_IL6_IL10_eDC'] * Gamma(Model['Gamma_IL10_eDC'], Model['K_IL10_eDC'], Model['m'], Model['C_IL10_MLN'])) - Gamma(Model['Gamma_IL6_nTe'], Model['K_IL6_nTe'], Model['m'], Model['C_IL6_MLN']) * np.sum(Model['A_nTe_MLN'], 0) - Gamma(Model['Gamma_IL6_nTt'], Model['K_IL6_nTt'], Model['m'], Model['C_IL6_MLN']) * np.sum(Model['A_nTt_MLN'], 0) - Model['c_delta_IL6'] * Model['C_IL6_MLN'])    
    VC_TGFBeta_MLN = Model['C_TGFBeta_MLN'] + dt * (np.sum(np.array([Model['Pi_TGFBeta_eDC'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_eDC_MLN'], 0) + np.sum(np.array([Model['Pi_TGFBeta_tDC'][i] for i in range(Model['N_chemical'] + 1)]).reshape(Model['N_chemical'] + 1, 1, 1, 1) * Model['A_eDC_MLN'], 0) - Gamma(Model['Gamma_TGFBeta_nTe'], Model['K_TGFBeta_nTe'], Model['m'], Model['C_TGFBeta_MLN']) * np.sum(Model['A_nTe_MLN'], 0) - Gamma(Model['Gamma_TGFBeta_nTt'], Model['K_TGFBeta_nTt'], Model['m'], Model['C_TGFBeta_MLN']) * np.sum(Model['A_nTt_MLN'], 0) + Model['Pi_TGFBeta_Stro'] * Model['A_Stro_MLN'] - Model['c_delta_TGFBeta'] * Model['C_TGFBeta_MLN'])
    VC_IL10_MLN = Model['C_IL10_MLN'] + dt * (Model['Pi_IL10_Treg'] * (1 + Model['k_Pi_auto_IL10'] * Gamma(Model['Gamma_IL10_Treg'], Model['K_IL10_Treg'], Model['m'], Model['C_IL10_MLN'])) * np.sum(Model['A_Treg_MLN'], 0) + Model['Pi_IL10_mTreg'] * (1 + Model['k_Pi_auto_IL10'] * Gamma(Model['Gamma_IL10_mTreg'], Model['K_IL10_mTreg'], Model['m'], Model['C_IL10_MLN'])) * np.sum(Model['A_mTreg_MLN'], 0) + Model['Pi_IL10_fTreg'] * (1 + Model['k_Pi_auto_IL10'] * Gamma(Model['Gamma_IL10_fTreg'], Model['K_IL10_fTreg'], Model['m'], Model['C_IL10_MLN'])) * np.sum(Model['A_fTreg_MLN'], 0) + Model['Pi_IL10_tTreg'] * (1 + Model['k_Pi_auto_IL10'] * Gamma(Model['Gamma_IL10_tTreg'], Model['K_IL10_Treg'], Model['m'], Model['C_IL10_MLN'])) * Model['A_tTreg_MLN'] - Gamma(Model['Gamma_IL10_eDC'], Model['K_IL10_eDC'], Model['m'], Model['C_IL10_MLN']) * np.sum(Model['A_eDC_MLN'], 0) - Gamma(Model['Gamma_IL10_TH17'], Model['K_IL10_TH17'], Model['m'], Model['C_IL10_MLN']) * np.sum(Model['A_TH17_MLN'], 0) - Gamma(Model['Gamma_IL10_Treg'], Model['K_IL10_Treg'], Model['m'], Model['C_IL10_MLN']) * np.sum(Model['A_Treg_MLN'], 0) - Gamma(Model['Gamma_IL10_fTreg'], Model['K_IL10_fTreg'], Model['m'], Model['C_IL10_MLN']) * np.sum(Model['A_fTreg_MLN'], 0) - Gamma(Model['Gamma_IL10_mTreg'], Model['K_IL10_mTreg'], Model['m'], Model['C_IL10_MLN']) * np.sum(Model['A_mTreg_MLN'], 0) - Gamma(Model['Gamma_IL10_tTreg'], Model['K_IL10_tTreg'], Model['m'], Model['C_IL10_MLN']) * Model['A_tTreg_MLN'] - Gamma(Model['Gamma_IL10_fTH17'], Model['K_IL10_fTH17'], Model['m'], Model['C_IL10_MLN']) * np.sum(Model['A_fTH17_MLN'], 0) - Gamma(Model['Gamma_IL10_mTH17'], Model['K_IL10_mTH17'], Model['m'], Model['C_IL10_MLN']) * np.sum(Model['A_mTH17_MLN'], 0) - Model['c_delta_IL10_MLN'] * Model['C_IL10_MLN'])
    
    return([VC_IL21_MLN, VC_IL2_MLN, VC_IL6_MLN, VC_TGFBeta_MLN, VC_IL10_MLN])
        
        ###############################################################################
        #Epithelium Time Dynamics
        ###############################################################################
        
def Update_Epi(Model, dt, t):

    VA_Epi = Model['A_Epi'] + dt * (- Mu_Epi(Model) * Model['A_Epi'] - Model['mu_Ejec'] * Model['A_Epi'] * Model['Ind_Top'] + Model['Ind_crypt'] * Omega(Model['D_max_Epi'], Theta_Epi(Model)) * Model['lambda_Epi_K'] * C(Model) * Model['A_Epi'] + Omega(Model['D_max_Epi'] * Model['Crypt_portion'], Theta_crypt(Model)) * lambda_sEpi(Model) * p(Model) * Model['A_sEpi'])
    VA_sEpi = Model['A_sEpi'] + dt * ( - Mu_sEpi(Model) * Model['A_sEpi'] + Omega(Model['D_max_Epi'] * Model['Crypt_portion'], Theta_crypt(Model)) * lambda_sEpi(Model) * (1 - p(Model)) * Model['A_sEpi'])


    VA_eAg_Epi = Model['A_eAg_Epi'] + dt * (- Model['phi_ImDC_eDC_Ag_Epi'] * Model['A_eAg_Epi'] * Model['A_ImDC_LP'] - (Mu_Epi(Model) + Model['mu_eAg_Epi']) * Model['A_eAg_Epi'] + Omega(Model['D_max_Epi'] * Model['n_Epi'], Theta_Ag_Epi(Model)) * (Model['xi_Epi_Ag'] * Model['A_Epi'] * (np.roll(Model['A_eAg'] / (Model['K_Ag_Epi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), 1, 1) + np.roll(Model['A_eAg'] / (Model['K_Ag_Epi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), -1, 1) + np.roll(Model['A_eAg'] / (Model['K_Ag_Epi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), 1, 2) + np.roll(Model['A_eAg'] / (Model['K_Ag_Epi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), -1, 2) + np.roll(Model['A_eAg'] / (Model['K_Ag_Epi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), -1, 3)))) 
    VA_tAg_Epi = Model['A_tAg_Epi'] + dt * (- Model['phi_ImDC_tDC_Ag_Epi'] * Model['A_tAg_Epi'] * Model['A_ImDC_LP'] - (Mu_Epi(Model) + Model['mu_tAg_Epi']) * Model['A_tAg_Epi'] + Omega(Model['D_max_Epi'] * Model['n_Epi'], Theta_Ag_Epi(Model)) * (Model['xi_Epi_Ag'] * Model['A_Epi'] * (np.roll(Model['A_tAg'] / (Model['K_Ag_Epi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), 1, 1) + np.roll(Model['A_tAg'] / (Model['K_Ag_Epi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), -1, 1) + np.roll(Model['A_tAg'] / (Model['K_Ag_Epi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), 1, 2) + np.roll(Model['A_tAg'] / (Model['K_Ag_Epi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), -1, 2) + np.roll(Model['A_tAg'] / (Model['K_Ag_Epi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), -1, 3))))

    VA_eAg_sEpi = Model['A_eAg_sEpi'] + dt * (- Model['phi_ImDC_eDC_Ag_sEpi'] * Model['A_eAg_sEpi'] * Model['A_ImDC_LP'] - (Mu_sEpi(Model) + Model['mu_eAg_sEpi']) * Model['A_eAg_sEpi'] + Omega(Model['D_max_Epi'] * Model['n_Epi'], Theta_Ag_Epi(Model)) * (Model['xi_sEpi_Ag'] * Model['A_sEpi'] * (np.roll(Model['A_eAg'] / (Model['K_Ag_sEpi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), 1, 1) + np.roll(Model['A_eAg'] / (Model['K_Ag_sEpi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), -1, 1) + np.roll(Model['A_eAg'] / (Model['K_Ag_sEpi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), 1, 2) + np.roll(Model['A_eAg'] / (Model['K_Ag_sEpi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), -1, 2) + np.roll(Model['A_eAg'] / (Model['K_Ag_sEpi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), -1, 3))))
    VA_tAg_sEpi = Model['A_tAg_sEpi'] + dt * (- Model['phi_ImDC_tDC_Ag_sEpi'] * Model['A_tAg_sEpi'] * Model['A_ImDC_LP'] - (Mu_sEpi(Model) + Model['mu_tAg_sEpi']) * Model['A_tAg_sEpi'] + Omega(Model['D_max_Epi'] * Model['n_Epi'], Theta_Ag_Epi(Model)) * (Model['xi_sEpi_Ag'] * Model['A_sEpi'] * (np.roll(Model['A_tAg'] / (Model['K_Ag_sEpi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), 1, 1) + np.roll(Model['A_tAg'] / (Model['K_Ag_sEpi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), -1, 1) + np.roll(Model['A_tAg'] / (Model['K_Ag_sEpi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), 1, 2) + np.roll(Model['A_tAg'] / (Model['K_Ag_sEpi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), -1, 2) + np.roll(Model['A_tAg'] / (Model['K_Ag_sEpi'] + np.sum(Model['A_eAg'], 0) + np.sum(Model['A_tAg'], 0)), -1, 3))))

    return([VA_Epi, VA_sEpi, VA_eAg_Epi, VA_tAg_Epi, VA_eAg_sEpi, VA_tAg_sEpi])

        ###############################################################################
        #Update Populations Lists Time Dynamics
        ###############################################################################
def Reverse_VA_A(Model, dt, t, VS_TH17_LP, VS_Treg_LP, VS_eDC_MLN, VS_tDC_MLN, VA_Mac_LP, VA_eAg_Mac_LP, VA_tAg_Mac_LP, VA_Mon_LP, VA_ImDC_LP, VA_eDC_LP, VA_tDC_LP, VA_TH17_LP, VA_Treg_LP, VA_sTH17_LP, VA_sTreg_LP, VC_eRA_LP, VC_tRA_LP, VA_eAg, VA_tAg, VA_eDC_MLN, VA_tDC_MLN, VC_eRA_MLN, VC_tRA_MLN, VA_nTc_MLN, VA_nTe_MLN, VA_nTt_MLN, VA_fTH17_MLN, VA_fTreg_MLN, VA_TH17_MLN, VA_Treg_MLN, VA_mTH17_MLN, VA_mTreg_MLN, VC_IL10_LP, VC_TGFBeta_LP, VC_IL17_LP, VC_IL22_LP, VC_IL2_LP, VC_CCL2_LP, VC_CCL25_LP, VC_IL1Beta_23_LP, VC_Csf2_LP, VC_IL21_MLN, VC_IL2_MLN, VC_IL6_MLN, VC_TGFBeta_MLN, VC_IL10_MLN, VA_sEpi, VA_Epi, VA_eAg_Epi, VA_tAg_Epi, VA_eAg_sEpi, VA_tAg_sEpi, VC_SAA_LP):        
    Model['S_TH17_LP'] = np.copy(VS_TH17_LP)
    Model['S_Treg_LP'] = np.copy(VS_Treg_LP)
    
    Model['S_eDC_MLN'] = np.copy(VS_eDC_MLN)
    Model['S_tDC_MLN'] = np.copy(VS_tDC_MLN)
    
    
    Model['A_Mac_LP'] = np.copy(VA_Mac_LP)
    Model['A_eAg_Mac_LP'] = np.copy(VA_eAg_Mac_LP)
    Model['A_tAg_Mac_LP'] = np.copy(VA_tAg_Mac_LP)
    Model['A_Mon_LP'] = np.copy(VA_Mon_LP)
    Model['A_ImDC_LP'] = np.copy(VA_ImDC_LP)
    Model['A_eDC_LP'] = np.copy(VA_eDC_LP)
    Model['A_tDC_LP'] = np.copy(VA_tDC_LP)
    Model['A_TH17_LP'] = np.copy(VA_TH17_LP)
    Model['A_Treg_LP'] = np.copy(VA_Treg_LP)
    Model['A_sTH17_LP'] = np.copy(VA_sTH17_LP)
    Model['A_sTreg_LP'] = np.copy(VA_sTreg_LP)
    Model['C_eRA_LP'] = np.copy(VC_eRA_LP)
    Model['C_tRA_LP'] = np.copy(VC_tRA_LP)
    
    Model['A_eAg'] = np.copy(VA_eAg)
    Model['A_tAg'] = np.copy(VA_tAg)
    
    Model['A_eDC_MLN'] = np.copy(VA_eDC_MLN)
    Model['A_tDC_MLN'] = np.copy(VA_tDC_MLN)
    Model['C_eRA_MLN'] = np.copy(VC_eRA_MLN)
    Model['C_tRA_MLN'] = np.copy(VC_tRA_MLN)
    Model['A_nTe_MLN'] = np.copy(VA_nTe_MLN)
    Model['A_nTt_MLN'] = np.copy(VA_nTt_MLN)
    Model['A_nTc_MLN'] = np.copy(VA_nTc_MLN)
    Model['A_fTH17_MLN'] = np.copy(VA_fTH17_MLN)
    Model['A_fTreg_MLN'] = np.copy(VA_fTreg_MLN)
    Model['A_TH17_MLN'] = np.copy(VA_TH17_MLN)
    Model['A_Treg_MLN'] = np.copy(VA_Treg_MLN)
    Model['A_mTH17_MLN'] = np.copy(VA_mTH17_MLN)
    Model['A_mTreg_MLN'] = np.copy(VA_mTreg_MLN)  
    
    Model['C_IL10_LP'] = np.copy(VC_IL10_LP)
    Model['C_TGFBeta_LP'] = np.copy(VC_TGFBeta_LP)
    Model['C_IL17_LP'] = np.copy(VC_IL17_LP)
    Model['C_IL22_LP'] = np.copy(VC_IL22_LP)
    Model['C_IL2_LP'] = np.copy(VC_IL2_LP)
    Model['C_CCL2_LP'] = np.copy(VC_CCL2_LP)
    Model['C_CCL25_LP'] = np.copy(VC_CCL25_LP)
    Model['C_IL1Beta_23_LP'] = np.copy(VC_IL1Beta_23_LP)
    Model['C_Csf2_LP'] = np.copy(VC_Csf2_LP)
    
    Model['C_IL21_MLN'] = np.copy(VC_IL21_MLN)
    Model['C_IL2_MLN'] = np.copy(VC_IL2_MLN)
    Model['C_IL6_MLN'] = np.copy(VC_IL6_MLN)
    Model['C_TGFBeta_MLN'] = np.copy(VC_TGFBeta_MLN)
    Model['C_IL10_MLN'] = np.copy(VC_IL10_MLN)
    
    Model['A_sEpi'] = np.copy(VA_sEpi)
    Model['A_Epi'] = np.copy(VA_Epi)
    Model['A_eAg_Epi'] = np.copy(VA_eAg_Epi)
    Model['A_tAg_Epi'] = np.copy(VA_tAg_Epi)
    Model['A_eAg_sEpi'] = np.copy(VA_eAg_sEpi)
    Model['A_tAg_sEpi'] = np.copy(VA_tAg_sEpi)
    Model['C_SAA_LP'] = np.copy(VC_SAA_LP)

        
        
        ###############################################################################
        #Agents Space Dynamics
        ###############################################################################
        
        
        #Lamina Propria################################################################
def Mov_Agent_LP(Model, dt, t):        
    VA_Mac_LP = Model['A_Mac_LP'] + dt * (- Model['A_Mac_LP'] * (np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP'], 1, 0) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP'], 1, 1) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP'], -1, 0) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP'], -1, 1) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP'], 1, 2) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP'], -1, 2)) + Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP']*(np.roll(Model['A_Mac_LP'], 1, 0) + np.roll(Model['A_Mac_LP'], -1, 0) + np.roll(Model['A_Mac_LP'], 1, 1) + np.roll(Model['A_Mac_LP'], -1, 1) + np.roll(Model['A_Mac_LP'], 1, 2) + np.roll(Model['A_Mac_LP'], -1, 2)))
    
    VA_Mon_LP = Model['A_Mon_LP'] + dt * (- Model['A_Mon_LP'] * (np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mon_LP'], 1, 0) * (1 + Model['M_Mon_chem'] * np.roll(Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP']), 1, 0)) / (1 + Model['M_Mon_chem'] * Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mon_LP'], 1, 1) * (1 + Model['M_Mon_chem'] * np.roll(Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP']), 1, 1)) / (1 + Model['M_Mon_chem'] * Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mon_LP'], -1, 0) * (1 + Model['M_Mon_chem'] * np.roll(Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP']), -1, 0)) / (1 + Model['M_Mon_chem'] * Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mon_LP'], -1, 1) * (1 + Model['M_Mon_chem'] * np.roll(Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP']), -1, 1)) / (1 + Model['M_Mon_chem'] * Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mon_LP'], 1, 2) * (1 + Model['M_Mon_chem'] * np.roll(Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP']), 1, 2)) / (1 + Model['M_Mon_chem'] * Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mon_LP'], -1, 2)) * (1 + Model['M_Mon_chem'] * np.roll(Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP']), -1, 2)) / (1 + Model['M_Mon_chem'] * Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP'])) + Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mon_LP']*(np.roll(Model['A_Mon_LP'], 1, 0) * (1 + Model['M_Mon_chem'] * Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP'])) / (1 + Model['M_Mon_chem'] * np.roll(Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP']), 1, 0)) + np.roll(Model['A_Mon_LP'], -1, 0) * (1 + Model['M_Mon_chem'] * Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP'])) / (1 + Model['M_Mon_chem'] * np.roll(Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP']), -1, 0)) + np.roll(Model['A_Mon_LP'], 1, 1) * (1 + Model['M_Mon_chem'] * Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP'])) / (1 + Model['M_Mon_chem'] * np.roll(Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP']), 1, 1)) + np.roll(Model['A_Mon_LP'], -1, 1) * (1 + Model['M_Mon_chem'] * Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP'])) / (1 + Model['M_Mon_chem'] * np.roll(Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP']), -1, 1)) + np.roll(Model['A_Mon_LP'], 1, 2) * (1 + Model['M_Mon_chem'] * Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP'])) / (1 + Model['M_Mon_chem'] * np.roll(Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP']), 1, 2)) + np.roll(Model['A_Mon_LP'], -1, 2) * (1 + Model['M_Mon_chem'] * Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP'])) / (1 + Model['M_Mon_chem'] * np.roll(Gamma(Model['Gamma_CCL2_Mon'], Model['K_CCL2_Mon'], Model['m'], Model['A_Mon_LP']), -1, 2))))
    
    VA_ImDC_LP = Model['A_ImDC_LP'] + dt * (- Model['A_ImDC_LP'] * (np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_ImDC_LP'], 1, 0) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_ImDC_LP'], 1, 1) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_ImDC_LP'], -1, 0) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_ImDC_LP'], -1, 1) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_ImDC_LP'], 1, 2) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_ImDC_LP'], -1, 2)) + Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_ImDC_LP']*(np.roll(Model['A_ImDC_LP'], 1, 0) + np.roll(Model['A_ImDC_LP'], -1, 0) + np.roll(Model['A_ImDC_LP'], 1, 1) + np.roll(Model['A_ImDC_LP'], -1, 1) + np.roll(Model['A_ImDC_LP'], 1, 2) + np.roll(Model['A_ImDC_LP'], -1, 2)))
        
    VA_eDC_LP = Model['A_eDC_LP'] + dt * (- Model['A_eDC_LP'] * (np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_eDC_LP'], 1, 0) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_eDC_LP'], 1, 0) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_eDC_LP'], -1, 0) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_eDC_LP'], -1, 1) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_eDC_LP'], 1, 2) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_eDC_LP'], -1, 2)) + Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_eDC_LP']*(np.roll(Model['A_eDC_LP'], 1, 1) + np.roll(Model['A_eDC_LP'], -1, 1) + np.roll(Model['A_eDC_LP'], 1, 2) + np.roll(Model['A_eDC_LP'], -1, 2) + np.roll(Model['A_eDC_LP'], 1, 3) + np.roll(Model['A_eDC_LP'], -1, 3)))   
    VA_tDC_LP = Model['A_tDC_LP'] + dt * (- Model['A_tDC_LP'] * (np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_tDC_LP'], 1, 0) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_tDC_LP'], 1, 0) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_tDC_LP'], -1, 0) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_tDC_LP'], -1, 1) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_tDC_LP'], 1, 2) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_tDC_LP'], -1, 2)) + Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_tDC_LP']*(np.roll(Model['A_tDC_LP'], 1, 1) + np.roll(Model['A_tDC_LP'], -1, 1) + np.roll(Model['A_tDC_LP'], 1, 2) + np.roll(Model['A_tDC_LP'], -1, 2) + np.roll(Model['A_tDC_LP'], 1, 3) + np.roll(Model['A_tDC_LP'], -1, 3)))
    VA_eAg_Mac_LP = Model['A_eAg_Mac_LP'] + dt * (- Model['A_eAg_Mac_LP'] * (np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP'], 1, 0) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP'], -1, 0) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP'], -1, 1) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP'], 1, 1) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP'], 1, 2) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP'], -1, 2)) + Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP']*(np.roll(Model['A_eAg_Mac_LP'], 1, 1) + np.roll(Model['A_eAg_Mac_LP'], -1, 1) + np.roll(Model['A_eAg_Mac_LP'], 1, 2) + np.roll(Model['A_eAg_Mac_LP'], -1, 2) + np.roll(Model['A_eAg_Mac_LP'], 1, 3) + np.roll(Model['A_eAg_Mac_LP'], -1, 3)))
    VA_tAg_Mac_LP = Model['A_tAg_Mac_LP'] + dt * (- Model['A_tAg_Mac_LP'] * (np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP'], 1, 0) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP'], -1, 0) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP'], -1, 1) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP'], 1, 1) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP'], 1, 2) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP'], -1, 2)) + Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Mac_LP']*(np.roll(Model['A_tAg_Mac_LP'], 1, 1) + np.roll(Model['A_tAg_Mac_LP'], -1, 1) + np.roll(Model['A_tAg_Mac_LP'], 1, 2) + np.roll(Model['A_tAg_Mac_LP'], -1, 2) + np.roll(Model['A_tAg_Mac_LP'], 1, 3) + np.roll(Model['A_tAg_Mac_LP'], -1, 3)))
    
    VA_TH17_LP = Model['A_TH17_LP'] + dt * (- Model['A_TH17_LP'] * (np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_TH17_LP'], 1, 0) * (1 + Model['M_TH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP']), 1, 0)) / (1 + Model['M_TH17_chem'] * Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_TH17_LP'], 1, 1) * (1 + Model['M_TH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP']), 1, 1)) / (1 + Model['M_TH17_chem'] * Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_TH17_LP'], -1, 0) * (1 + Model['M_TH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP']), -1, 0)) / (1 + Model['M_TH17_chem'] * Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_TH17_LP'], -1, 1) * (1 + Model['M_TH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP']), -1, 1)) / (1 + Model['M_TH17_chem'] * Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model)) * Model['MapMov_TH17_LP'], 1, 2) * (1 + Model['M_TH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP']), 1, 2)) / (1 + Model['M_TH17_chem'] * Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model)) * Model['MapMov_TH17_LP'], -1, 2)) * (1 + Model['M_TH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP']), -1, 2)) / (1 + Model['M_TH17_chem'] * Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP'])) + Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_TH17_LP']*(np.roll(Model['A_TH17_LP'], 1, 1) * (1 + Model['M_TH17_chem'] * Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_TH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP']), 1, 0)) + np.roll(Model['A_TH17_LP'], -1, 1) * (1 + Model['M_TH17_chem'] * Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_TH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP']), -1, 0)) + np.roll(Model['A_TH17_LP'], 1, 2) * (1 + Model['M_TH17_chem'] * Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_TH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP']), 1, 1)) + np.roll(Model['A_TH17_LP'], -1, 2) * (1 + Model['M_TH17_chem'] * Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_TH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP']), -1, 1)) + np.roll(Model['A_TH17_LP'], 1, 3) * (1 + Model['M_TH17_chem'] * Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_TH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP']), 1, 2)) + np.roll(Model['A_TH17_LP'], -1, 3) * (1 + Model['M_TH17_chem'] * Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_TH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_TH17'], Model['K_CCL25_TH17'], Model['m'], Model['C_CCL25_LP']), -1, 2))))
    VA_Treg_LP = Model['A_Treg_LP'] + dt * (- Model['A_Treg_LP'] * (np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Treg_LP'], 1, 0) * (1 + Model['M_Treg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP']), 1, 0)) / (1 + Model['M_Treg_chem'] * Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Treg_LP'], 1, 1) * (1 + Model['M_Treg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP']), 1, 1)) / (1 + Model['M_Treg_chem'] * Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Treg_LP'], -1, 0) * (1 + Model['M_Treg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP']), -1, 0)) / (1 + Model['M_Treg_chem'] * Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Treg_LP'], -1, 1) * (1 + Model['M_Treg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP']), -1, 1)) / (1 + Model['M_Treg_chem'] * Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model)) * Model['MapMov_Treg_LP'], 1, 2) * (1 + Model['M_Treg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP']), 1, 2)) / (1 + Model['M_Treg_chem'] * Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model)) * Model['MapMov_Treg_LP'], -1, 2)) * (1 + Model['M_Treg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP']), -1, 2)) / (1 + Model['M_Treg_chem'] * Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP'])) + Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_Treg_LP']*(np.roll(Model['A_Treg_LP'], 1, 1) * (1 + Model['M_Treg_chem'] * Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_Treg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP']), 1, 0)) + np.roll(Model['A_Treg_LP'], -1, 1) * (1 + Model['M_Treg_chem'] * Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_Treg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP']), -1, 0)) + np.roll(Model['A_Treg_LP'], 1, 2) * (1 + Model['M_Treg_chem'] * Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_Treg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP']), 1, 1)) + np.roll(Model['A_Treg_LP'], -1, 2) * (1 + Model['M_Treg_chem'] * Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_Treg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP']), -1, 1)) + np.roll(Model['A_Treg_LP'], 1, 3) * (1 + Model['M_Treg_chem'] * Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_Treg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP']), 1, 2)) + np.roll(Model['A_Treg_LP'], -1, 3) * (1 + Model['M_Treg_chem'] * Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_Treg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_Treg'], Model['K_CCL25_Treg'], Model['m'], Model['C_CCL25_LP']), -1, 2))))
    VA_sTH17_LP = Model['A_sTH17_LP'] + dt * (- Model['A_sTH17_LP'] * (np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_sTH17_LP'], 1, 0) * (1 + Model['M_sTH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP']), 1, 0)) / (1 + Model['M_sTH17_chem'] * Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_sTH17_LP'], 1, 1) * (1 + Model['M_sTH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP']), 1, 1)) / (1 + Model['M_sTH17_chem'] * Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_sTH17_LP'], -1, 0) * (1 + Model['M_sTH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP']), -1, 0)) / (1 + Model['M_sTH17_chem'] * Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_sTH17_LP'], -1, 1) * (1 + Model['M_sTH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP']), -1, 1)) / (1 + Model['M_sTH17_chem'] * Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model)) * Model['MapMov_sTH17_LP'], 1, 2) * (1 + Model['M_sTH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP']), 1, 2)) / (1 + Model['M_sTH17_chem'] * Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model)) * Model['MapMov_sTH17_LP'], -1, 2)) * (1 + Model['M_sTH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP']), -1, 2)) / (1 + Model['M_sTH17_chem'] * Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP'])) + Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_sTH17_LP']*(np.roll(Model['A_sTH17_LP'], 1, 1) * (1 + Model['M_sTH17_chem'] * Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_sTH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP']), 1, 0)) + np.roll(Model['A_sTH17_LP'], -1, 1) * (1 + Model['M_sTH17_chem'] * Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_sTH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP']), -1, 0)) + np.roll(Model['A_sTH17_LP'], 1, 2) * (1 + Model['M_sTH17_chem'] * Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_sTH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP']), 1, 1)) + np.roll(Model['A_sTH17_LP'], -1, 2) * (1 + Model['M_sTH17_chem'] * Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_sTH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP']), -1, 1)) + np.roll(Model['A_sTH17_LP'], 1, 3) * (1 + Model['M_sTH17_chem'] * Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_sTH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP']), 1, 2)) + np.roll(Model['A_sTH17_LP'], -1, 3) * (1 + Model['M_sTH17_chem'] * Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_sTH17_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTH17'], Model['K_CCL25_sTH17'], Model['m'], Model['C_CCL25_LP']), -1, 2))))
    VA_sTreg_LP = Model['A_sTreg_LP'] + dt * (- Model['A_sTreg_LP'] * (np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_sTreg_LP'], 1, 0) * (1 + Model['M_sTreg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP']), 1, 0)) / (1 + Model['M_sTreg_chem'] * Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_sTreg_LP'], 1, 1) * (1 + Model['M_sTreg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP']), 1, 1)) / (1 + Model['M_sTreg_chem'] * Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_sTreg_LP'], -1, 0) * (1 + Model['M_sTreg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP']), -1, 0)) / (1 + Model['M_sTreg_chem'] * Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_sTreg_LP'], -1, 1) * (1 + Model['M_sTreg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP']), -1, 1)) / (1 + Model['M_sTreg_chem'] * Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model)) * Model['MapMov_sTreg_LP'], 1, 2) * (1 + Model['M_sTreg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP']), 1, 2)) / (1 + Model['M_sTreg_chem'] * Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP'])) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model)) * Model['MapMov_sTreg_LP'], -1, 2)) * (1 + Model['M_sTreg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP']), -1, 2)) / (1 + Model['M_sTreg_chem'] * Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP'])) + Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_sTreg_LP']*(np.roll(Model['A_sTreg_LP'], 1, 1) * (1 + Model['M_sTreg_chem'] * Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_sTreg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP']), 1, 0)) + np.roll(Model['A_sTreg_LP'], -1, 1) * (1 + Model['M_sTreg_chem'] * Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_sTreg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP']), -1, 0)) + np.roll(Model['A_sTreg_LP'], 1, 2) * (1 + Model['M_sTreg_chem'] * Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_sTreg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP']), 1, 1)) + np.roll(Model['A_sTreg_LP'], -1, 2) * (1 + Model['M_sTreg_chem'] * Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_sTreg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP']), -1, 1)) + np.roll(Model['A_sTreg_LP'], 1, 3) * (1 + Model['M_sTreg_chem'] * Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_sTreg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP']), 1, 2)) + np.roll(Model['A_sTreg_LP'], -1, 3) * (1 + Model['M_sTreg_chem'] * Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP'])) / (1 + Model['M_sTreg_chem'] * np.roll(Gamma(Model['Gamma_CCL25_sTreg'], Model['K_CCL25_sTreg'], Model['m'], Model['C_CCL25_LP']), -1, 2))))
    
    VC_eRA_LP = Model['C_eRA_LP'] + dt * (- Model['C_eRA_LP'] * (np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_eDC_LP'], 1, 0) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_eDC_LP'], 1, 1) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_eDC_LP'], -1, 0) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_eDC_LP'], -1, 1) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_eDC_LP'], 1, 2) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_eDC_LP'], -1, 2)) + Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_eDC_LP']*(np.roll(Model['C_eRA_LP'], 1, 1) + np.roll(Model['C_eRA_LP'], -1, 1) + np.roll(Model['C_eRA_LP'], 1, 2) + np.roll(Model['C_eRA_LP'], -1, 2) + np.roll(Model['C_eRA_LP'], 1, 3) + np.roll(Model['C_eRA_LP'], -1, 3)))
    VC_tRA_LP = Model['C_tRA_LP'] + dt * (- Model['C_tRA_LP'] * (np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_tDC_LP'], 1, 0) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_tDC_LP'], 1, 1) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_tDC_LP'], -1, 0) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_tDC_LP'], -1, 1) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_tDC_LP'], 1, 2) + np.roll(Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_tDC_LP'], -1, 2)) + Omega(Model['D_max_LP'], Theta_LP(Model))*Model['MapMov_tDC_LP']*(np.roll(Model['C_tRA_LP'], 1, 1) + np.roll(Model['C_tRA_LP'], -1, 1) + np.roll(Model['C_tRA_LP'], 1, 2) + np.roll(Model['C_tRA_LP'], -1, 2) + np.roll(Model['C_tRA_LP'], 1, 3) + np.roll(Model['C_tRA_LP'], -1, 3)))
    
    return([VA_Mon_LP, VA_Mac_LP, VA_ImDC_LP, VA_TH17_LP, VA_sTH17_LP, VA_Treg_LP, VA_sTreg_LP, VA_eDC_LP, VA_tDC_LP, VC_eRA_LP, VC_tRA_LP, VA_eAg_Mac_LP, VA_tAg_Mac_LP])       
    
        #Mesenteric Lymph Node#########################################################
def Mov_Agent_MLN(Model, dt, t):        
    VA_eDC_MLN = Model['A_eDC_MLN'] + dt * (- Model['A_eDC_MLN'] * (np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 2) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 2)) + Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN']*(np.roll(Model['A_eDC_MLN'], 1, 1) + np.roll(Model['A_eDC_MLN'], -1, 1) + np.roll(Model['A_eDC_MLN'], 1, 2) + np.roll(Model['A_eDC_MLN'], -1, 2) + np.roll(Model['A_eDC_MLN'], 1, 3) + np.roll(Model['A_eDC_MLN'], -1, 3)))        
    VA_tDC_MLN = Model['A_tDC_MLN'] + dt * (- Model['A_tDC_MLN'] * (np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 2) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 2)) + Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN']*(np.roll(Model['A_tDC_MLN'], 1, 1) + np.roll(Model['A_tDC_MLN'], -1, 1) + np.roll(Model['A_tDC_MLN'], 1, 2) + np.roll(Model['A_tDC_MLN'], -1, 2) + np.roll(Model['A_tDC_MLN'], 1, 3) + np.roll(Model['A_tDC_MLN'], -1, 3)))
    VA_nTc_MLN = Model['A_nTc_MLN'] + dt * (- Model['A_nTc_MLN'] * (np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_nTc_MLN'], 1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_nTc_MLN'], 1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_nTc_MLN'], -1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_nTc_MLN'], -1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_nTc_MLN'], 1, 2) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_nTc_MLN'], -1, 2)) + Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_nTc_MLN']*(np.roll(Model['A_nTc_MLN'], 1, 1) + np.roll(Model['A_nTc_MLN'], -1, 1) + np.roll(Model['A_nTc_MLN'], 1, 2) + np.roll(Model['A_nTc_MLN'], -1, 2) + np.roll(Model['A_nTc_MLN'], 1, 3) + np.roll(Model['A_nTc_MLN'], -1, 3)))    
    VA_nTe_MLN = Model['A_nTe_MLN'] + dt * (- Model['A_nTe_MLN'] * (np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 2) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 2)) + Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN']*(np.roll(Model['A_nTe_MLN'], 1, 1) + np.roll(Model['A_nTe_MLN'], -1, 1) + np.roll(Model['A_nTe_MLN'], 1, 2) + np.roll(Model['A_nTe_MLN'], -1, 2) + np.roll(Model['A_nTe_MLN'], 1, 3) + np.roll(Model['A_nTe_MLN'], -1, 3)))        
    VA_nTt_MLN = Model['A_nTt_MLN'] + dt * (- Model['A_nTt_MLN'] * (np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 2) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 2)) + Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN']*(np.roll(Model['A_nTt_MLN'], 1, 1) + np.roll(Model['A_nTt_MLN'], -1, 1) + np.roll(Model['A_nTt_MLN'], 1, 2) + np.roll(Model['A_nTt_MLN'], -1, 2) + np.roll(Model['A_nTt_MLN'], 1, 3) + np.roll(Model['A_nTt_MLN'], -1, 3)))        
    VA_fTH17_MLN = Model['A_fTH17_MLN'] + dt * (- Model['A_fTH17_MLN'] * (np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 2) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 2)) + Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN']*(np.roll(Model['A_fTH17_MLN'], 1, 1) + np.roll(Model['A_fTH17_MLN'], -1, 1) + np.roll(Model['A_fTH17_MLN'], 1, 2) + np.roll(Model['A_fTH17_MLN'], -1, 2) + np.roll(Model['A_fTH17_MLN'], 1, 3) + np.roll(Model['A_fTH17_MLN'], -1, 3)))        
    VA_fTreg_MLN = Model['A_fTreg_MLN'] + dt * (- Model['A_fTreg_MLN'] * (np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 2) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 2)) + Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN']*(np.roll(Model['A_fTreg_MLN'], 1, 1) + np.roll(Model['A_fTreg_MLN'], -1, 1) + np.roll(Model['A_fTreg_MLN'], 1, 2) + np.roll(Model['A_fTreg_MLN'], -1, 2) + np.roll(Model['A_fTreg_MLN'], 1, 3) + np.roll(Model['A_fTreg_MLN'], -1, 3)))        
    VA_TH17_MLN = Model['A_TH17_MLN'] + dt * (- Model['A_TH17_MLN'] * (np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_TH17_MLN'], 1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_TH17_MLN'], 1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_TH17_MLN'], -1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_TH17_MLN'], -1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_TH17_MLN'], 1, 2) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_TH17_MLN'], -1, 2)) + Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_TH17_MLN']*(np.roll(Model['A_TH17_MLN'], 1, 1) + np.roll(Model['A_TH17_MLN'], -1, 1) + np.roll(Model['A_TH17_MLN'], 1, 2) + np.roll(Model['A_TH17_MLN'], -1, 2) + np.roll(Model['A_TH17_MLN'], 1, 3) + np.roll(Model['A_TH17_MLN'], -1, 3)))        
    VA_Treg_MLN = Model['A_Treg_MLN'] + dt * (- Model['A_Treg_MLN'] * (np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_Treg_MLN'], 1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_Treg_MLN'], 1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_Treg_MLN'], -1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_Treg_MLN'], -1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_Treg_MLN'], 1, 2) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_Treg_MLN'], -1, 2)) + Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_Treg_MLN']*(np.roll(Model['A_Treg_MLN'], 1, 1) + np.roll(Model['A_Treg_MLN'], -1, 1) + np.roll(Model['A_Treg_MLN'], 1, 2) + np.roll(Model['A_Treg_MLN'], -1, 2) + np.roll(Model['A_Treg_MLN'], 1, 3) + np.roll(Model['A_Treg_MLN'], -1, 3)))        
    VA_mTH17_MLN = Model['A_mTH17_MLN'] + dt * (- Model['A_mTH17_MLN'] * (np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_mTH17_MLN'], 1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_mTH17_MLN'], 1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_mTH17_MLN'], -1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_mTH17_MLN'], -1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_mTH17_MLN'], 1, 2) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_mTH17_MLN'], -1, 2)) + Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_mTH17_MLN']*(np.roll(Model['A_mTH17_MLN'], 1, 1) + np.roll(Model['A_mTH17_MLN'], -1, 1) + np.roll(Model['A_mTH17_MLN'], 1, 2) + np.roll(Model['A_mTH17_MLN'], -1, 2) + np.roll(Model['A_mTH17_MLN'], 1, 3) + np.roll(Model['A_mTH17_MLN'], -1, 3)))       
    VA_mTreg_MLN = Model['A_mTreg_MLN'] + dt * (- Model['A_mTreg_MLN'] * (np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_mTreg_MLN'], 1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_mTreg_MLN'], 1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_mTreg_MLN'], -1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_mTreg_MLN'], -1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_mTreg_MLN'], 1, 2) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_mTreg_MLN'], -1, 2)) + Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_mTreg_MLN']*(np.roll(Model['A_mTreg_MLN'], 1, 1) + np.roll(Model['A_mTreg_MLN'], -1, 1) + np.roll(Model['A_mTreg_MLN'], 1, 2) + np.roll(Model['A_mTreg_MLN'], -1, 2) + np.roll(Model['A_mTreg_MLN'], 1, 3) + np.roll(Model['A_mTreg_MLN'], -1, 3)))
    VC_eRA_MLN = Model['C_eRA_MLN'] + dt * (- Model['C_eRA_MLN'] * (np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 2) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 2)) + Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN']*(np.roll(Model['C_eRA_MLN'], 1, 1) + np.roll(Model['C_eRA_MLN'], -1, 1) + np.roll(Model['C_eRA_MLN'], 1, 2) + np.roll(Model['C_eRA_MLN'], -1, 2) + np.roll(Model['C_eRA_MLN'], 1, 3) + np.roll(Model['C_eRA_MLN'], -1, 3)))
    VC_tRA_MLN = Model['C_tRA_MLN'] + dt * (- Model['C_tRA_MLN'] * (np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 0) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 1) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], 1, 2) + np.roll(Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN'], -1, 2)) + Omega(Model['D_max_MLN'], Theta_MLN(Model))*Model['MapMov_DC_MLN']*(np.roll(Model['C_tRA_MLN'], 1, 1) + np.roll(Model['C_tRA_MLN'], -1, 1) + np.roll(Model['C_tRA_MLN'], 1, 2) + np.roll(Model['C_tRA_MLN'], -1, 2) + np.roll(Model['C_tRA_MLN'], 1, 3) + np.roll(Model['C_tRA_MLN'], -1, 3)))
           
    return([VA_eDC_MLN, VA_tDC_MLN, VA_nTc_MLN, VA_nTe_MLN, VA_nTt_MLN, VA_TH17_MLN, VA_Treg_MLN, VA_mTH17_MLN, VA_mTreg_MLN, VA_fTH17_MLN, VA_fTreg_MLN, VC_eRA_MLN, VC_tRA_MLN])
        
        ###############################################################################
        #Soluble Mediators Space Dynamics
        ###############################################################################
def Mov_Cyt_LP(Model, dt, t, SubT):
    for k in range(SubT):
    #Lamina Propria################################################################
            
        VC_IL10_LP = Model['C_IL10_LP'] + (dt/SubT) * (- Model['C_IL10_LP'] * (np.roll(Model['MapDiff_IL10_LP'], 1, 0) + np.roll(Model['MapDiff_IL10_LP'], 1, 1) + np.roll(Model['MapDiff_IL10_LP'], -1, 0) + np.roll(Model['MapDiff_IL10_LP'], -1, 1) + np.roll(Model['MapDiff_IL10_LP'], 1, 2) + np.roll(Model['MapDiff_IL10_LP'], -1, 2)) + Model['MapDiff_IL10_LP']*(np.roll(Model['C_IL10_LP'], 1, 0) + np.roll(Model['C_IL10_LP'], -1, 0) + np.roll(Model['C_IL10_LP'], 1, 1) + np.roll(Model['C_IL10_LP'], -1, 1) + np.roll(Model['C_IL10_LP'], 1, 2) + np.roll(Model['C_IL10_LP'], -1, 2)))
    
        VC_TGFBeta_LP = Model['C_TGFBeta_LP'] + (dt/SubT) * (- Model['C_TGFBeta_LP'] * (np.roll(Model['MapDiff_TGFBeta_LP'], 1, 0) + np.roll(Model['MapDiff_TGFBeta_LP'], 1, 1) + np.roll(Model['MapDiff_TGFBeta_LP'], -1, 0) + np.roll(Model['MapDiff_TGFBeta_LP'], -1, 1) + np.roll(Model['MapDiff_TGFBeta_LP'], 1, 2) + np.roll(Model['MapDiff_TGFBeta_LP'], -1, 2)) + Model['MapDiff_TGFBeta_LP']*(np.roll(Model['C_TGFBeta_LP'], 1, 0) + np.roll(Model['C_TGFBeta_LP'], -1, 0) + np.roll(Model['C_TGFBeta_LP'], 1, 1) + np.roll(Model['C_TGFBeta_LP'], -1, 1) + np.roll(Model['C_TGFBeta_LP'], 1, 2) + np.roll(Model['C_TGFBeta_LP'], -1, 2)))
    
        VC_SAA_LP = Model['C_SAA_LP'] + (dt/SubT) * (- Model['C_SAA_LP'] * (np.roll(Model['MapDiff_SAA_LP'], 1, 0) + np.roll(Model['MapDiff_SAA_LP'], 1, 1) + np.roll(Model['MapDiff_SAA_LP'], -1, 0) + np.roll(Model['MapDiff_SAA_LP'], -1, 1) + np.roll(Model['MapDiff_SAA_LP'], 1, 2) + np.roll(Model['MapDiff_SAA_LP'], -1, 2)) + Model['MapDiff_SAA_LP']*(np.roll(Model['C_SAA_LP'], 1, 0) + np.roll(Model['C_SAA_LP'], -1, 0) + np.roll(Model['C_SAA_LP'], 1, 1) + np.roll(Model['C_SAA_LP'], -1, 1) + np.roll(Model['C_SAA_LP'], 1, 2) + np.roll(Model['C_SAA_LP'], -1, 2)))
    
        VC_IL17_LP = Model['C_IL17_LP'] + (dt/SubT) * (- Model['C_IL17_LP'] * (np.roll(Model['MapDiff_IL17_LP'], 1, 0) + np.roll(Model['MapDiff_IL17_LP'], 1, 1) + np.roll(Model['MapDiff_IL17_LP'], -1, 0) + np.roll(Model['MapDiff_IL17_LP'], -1, 1) + np.roll(Model['MapDiff_IL17_LP'], 1, 2) + np.roll(Model['MapDiff_IL17_LP'], -1, 2)) + Model['MapDiff_IL17_LP']*(np.roll(Model['C_IL17_LP'], 1, 0) + np.roll(Model['C_IL17_LP'], -1, 0) + np.roll(Model['C_IL17_LP'], 1, 1) + np.roll(Model['C_IL17_LP'], -1, 1) + np.roll(Model['C_IL17_LP'], 1, 2) + np.roll(Model['C_IL17_LP'], -1, 2)))
    
        VC_IL22_LP = Model['C_IL22_LP'] + (dt/SubT) * (- Model['C_IL22_LP'] * (np.roll(Model['MapDiff_IL22_LP'], 1, 0) + np.roll(Model['MapDiff_IL22_LP'], 1, 1) + np.roll(Model['MapDiff_IL22_LP'], -1, 0) + np.roll(Model['MapDiff_IL22_LP'], -1, 1) + np.roll(Model['MapDiff_IL22_LP'], 1, 2) + np.roll(Model['MapDiff_IL22_LP'], -1, 2)) + Model['MapDiff_IL22_LP']*(np.roll(Model['C_IL22_LP'], 1, 0) + np.roll(Model['C_IL22_LP'], -1, 0) + np.roll(Model['C_IL22_LP'], 1, 1) + np.roll(Model['C_IL22_LP'], -1, 1) + np.roll(Model['C_IL22_LP'], 1, 2) + np.roll(Model['C_IL22_LP'], -1, 2)))
    
        VC_IL2_LP = Model['C_IL2_LP'] + (dt/SubT) * (- Model['C_IL2_LP'] * (np.roll(Model['MapDiff_IL2_LP'], 1, 0) + np.roll(Model['MapDiff_IL2_LP'], 1, 1) + np.roll(Model['MapDiff_IL2_LP'], -1, 0) + np.roll(Model['MapDiff_IL2_LP'], -1, 1) + np.roll(Model['MapDiff_IL2_LP'], 1, 2) + np.roll(Model['MapDiff_IL2_LP'], -1, 2)) + Model['MapDiff_IL2_LP']*(np.roll(Model['C_IL2_LP'], 1, 0) + np.roll(Model['C_IL2_LP'], -1, 0) + np.roll(Model['C_IL2_LP'], 1, 1) + np.roll(Model['C_IL2_LP'], -1, 1) + np.roll(Model['C_IL2_LP'], 1, 2) + np.roll(Model['C_IL2_LP'], -1, 2)))
    
        VC_CCL2_LP = Model['C_CCL2_LP'] + (dt/SubT) * (- Model['C_CCL2_LP'] * (np.roll(Model['MapDiff_CCL2_LP'], 1, 0) + np.roll(Model['MapDiff_CCL2_LP'], 1, 1) + np.roll(Model['MapDiff_CCL2_LP'], -1, 0) + np.roll(Model['MapDiff_CCL2_LP'], -1, 1) + np.roll(Model['MapDiff_CCL2_LP'], 1, 2) + np.roll(Model['MapDiff_CCL2_LP'], -1, 2)) + Model['MapDiff_CCL2_LP']*(np.roll(Model['C_CCL2_LP'], 1, 0) + np.roll(Model['C_CCL2_LP'], -1, 0) + np.roll(Model['C_CCL2_LP'], 1, 1) + np.roll(Model['C_CCL2_LP'], -1, 1) + np.roll(Model['C_CCL2_LP'], 1, 2) + np.roll(Model['C_CCL2_LP'], -1, 2)))
    
        VC_CCL25_LP = Model['C_CCL25_LP'] + (dt/SubT) * (- Model['C_CCL25_LP'] * (np.roll(Model['MapDiff_CCL25_LP'], 1, 0) + np.roll(Model['MapDiff_CCL25_LP'], 1, 1) + np.roll(Model['MapDiff_CCL25_LP'], -1, 0) + np.roll(Model['MapDiff_CCL25_LP'], -1, 1) + np.roll(Model['MapDiff_CCL25_LP'], 1, 2) + np.roll(Model['MapDiff_CCL25_LP'], -1, 2)) + Model['MapDiff_CCL25_LP']*(np.roll(Model['C_CCL25_LP'], 1, 0) + np.roll(Model['C_CCL25_LP'], -1, 0) + np.roll(Model['C_CCL25_LP'], 1, 1) + np.roll(Model['C_CCL25_LP'], -1, 1) + np.roll(Model['C_CCL25_LP'], 1, 2) + np.roll(Model['C_CCL25_LP'], -1, 2)))
    
        VC_IL1Beta_23_LP = Model['C_IL1Beta_23_LP'] + (dt/SubT) * (- Model['C_IL1Beta_23_LP'] * (np.roll(Model['MapDiff_IL1Beta_23_LP'], 1, 0) + np.roll(Model['MapDiff_IL1Beta_23_LP'], 1, 1) + np.roll(Model['MapDiff_IL1Beta_23_LP'], -1, 0) + np.roll(Model['MapDiff_IL1Beta_23_LP'], -1, 1) + np.roll(Model['MapDiff_IL1Beta_23_LP'], 1, 2) + np.roll(Model['MapDiff_IL1Beta_23_LP'], -1, 2)) + Model['MapDiff_IL1Beta_23_LP']*(np.roll(Model['C_IL1Beta_23_LP'], 1, 0) + np.roll(Model['C_IL1Beta_23_LP'], -1, 0) + np.roll(Model['C_IL1Beta_23_LP'], 1, 1) + np.roll(Model['C_IL1Beta_23_LP'], -1, 1) + np.roll(Model['C_IL1Beta_23_LP'], 1, 2) + np.roll(Model['C_IL1Beta_23_LP'], -1, 2)))
    
        VC_Csf2_LP = Model['C_Csf2_LP'] + (dt/SubT) * (- Model['C_Csf2_LP'] * (np.roll(Model['MapDiff_Csf2_LP'], 1, 0) + np.roll(Model['MapDiff_Csf2_LP'], 1, 1) + np.roll(Model['MapDiff_Csf2_LP'], -1, 0) + np.roll(Model['MapDiff_Csf2_LP'], -1, 1) + np.roll(Model['MapDiff_Csf2_LP'], 1, 2) + np.roll(Model['MapDiff_Csf2_LP'], -1, 2)) + Model['MapDiff_Csf2_LP']*(np.roll(Model['C_Csf2_LP'], 1, 0) + np.roll(Model['C_Csf2_LP'], -1, 0) + np.roll(Model['C_Csf2_LP'], 1, 1) + np.roll(Model['C_Csf2_LP'], -1, 1) + np.roll(Model['C_Csf2_LP'], 1, 2) + np.roll(Model['C_Csf2_LP'], -1, 2)))
    
    return([VC_IL10_LP, VC_TGFBeta_LP, VC_IL17_LP, VC_IL22_LP, VC_IL2_LP, VC_CCL2_LP, VC_CCL25_LP, VC_IL1Beta_23_LP, VC_Csf2_LP, VC_SAA_LP])
        
        #Mesenteric Lymph Node#########################################################
def Mov_Cyt_MLN(Model, dt, t, SubT): 
    for k in range(SubT):       
        VC_IL10_MLN = Model['C_IL10_MLN'] + (dt/SubT) * (- Model['C_IL10_MLN'] * (np.roll(Model['MapDiff_IL10_MLN'], 1, 0) + np.roll(Model['MapDiff_IL10_MLN'], 1, 1) + np.roll(Model['MapDiff_IL10_MLN'], -1, 0) + np.roll(Model['MapDiff_IL10_MLN'], -1, 1) + np.roll(Model['MapDiff_IL10_MLN'], 1, 2) + np.roll(Model['MapDiff_IL10_MLN'], -1, 2)) + Model['MapDiff_IL10_MLN']*(np.roll(Model['C_IL10_MLN'], 1, 0) + np.roll(Model['C_IL10_MLN'], -1, 0) + np.roll(Model['C_IL10_MLN'], 1, 1) + np.roll(Model['C_IL10_MLN'], -1, 1) + np.roll(Model['C_IL10_MLN'], 1, 2) + np.roll(Model['C_IL10_MLN'], -1, 2)))
    
        VC_TGFBeta_MLN = Model['C_TGFBeta_MLN'] + (dt/SubT) * (- Model['C_TGFBeta_MLN'] * (np.roll(Model['MapDiff_TGFBeta_MLN'], 1, 0) + np.roll(Model['MapDiff_TGFBeta_MLN'], 1, 1) + np.roll(Model['MapDiff_TGFBeta_MLN'], -1, 0) + np.roll(Model['MapDiff_TGFBeta_MLN'], -1, 1) + np.roll(Model['MapDiff_TGFBeta_MLN'], 1, 2) + np.roll(Model['MapDiff_TGFBeta_MLN'], -1, 2)) + Model['MapDiff_TGFBeta_MLN']*(np.roll(Model['C_TGFBeta_MLN'], 1, 0) + np.roll(Model['C_TGFBeta_MLN'], -1, 0) + np.roll(Model['C_TGFBeta_MLN'], 1, 1) + np.roll(Model['C_TGFBeta_MLN'], -1, 1) + np.roll(Model['C_TGFBeta_MLN'], 1, 2) + np.roll(Model['C_TGFBeta_MLN'], -1, 2)))
    
        VC_IL21_MLN = Model['C_IL21_MLN'] + (dt/SubT) * (- Model['C_IL21_MLN'] * (np.roll(Model['MapDiff_IL21_MLN'], 1, 0) + np.roll(Model['MapDiff_IL21_MLN'], 1, 1) + np.roll(Model['MapDiff_IL21_MLN'], -1, 0) + np.roll(Model['MapDiff_IL21_MLN'], -1, 1) + np.roll(Model['MapDiff_IL21_MLN'], 1, 2) + np.roll(Model['MapDiff_IL21_MLN'], -1, 2)) + Model['MapDiff_IL21_MLN']*(np.roll(Model['C_IL21_MLN'], 1, 0) + np.roll(Model['C_IL21_MLN'], -1, 0) + np.roll(Model['C_IL21_MLN'], 1, 1) + np.roll(Model['C_IL21_MLN'], -1, 1) + np.roll(Model['C_IL21_MLN'], 1, 2) + np.roll(Model['C_IL21_MLN'], -1, 2)))
    
        VC_IL2_MLN = Model['C_IL2_MLN'] + (dt/SubT) * (- Model['C_IL2_MLN'] * (np.roll(Model['MapDiff_IL2_MLN'], 1, 0) + np.roll(Model['MapDiff_IL2_MLN'], 1, 1) + np.roll(Model['MapDiff_IL2_MLN'], -1, 0) + np.roll(Model['MapDiff_IL2_MLN'], -1, 1) + np.roll(Model['MapDiff_IL2_MLN'], 1, 2) + np.roll(Model['MapDiff_IL2_MLN'], -1, 2)) + Model['MapDiff_IL2_MLN']*(np.roll(Model['C_IL2_MLN'], 1, 0) + np.roll(Model['C_IL2_MLN'], -1, 0) + np.roll(Model['C_IL2_MLN'], 1, 1) + np.roll(Model['C_IL2_MLN'], -1, 1) + np.roll(Model['C_IL2_MLN'], 1, 2) + np.roll(Model['C_IL2_MLN'], -1, 2)))
    
        VC_IL6_MLN = Model['C_IL6_MLN'] + (dt/SubT) * (- Model['C_IL6_MLN'] * (np.roll(Model['MapDiff_IL6_MLN'], 1, 0) + np.roll(Model['MapDiff_IL6_MLN'], 1, 1) + np.roll(Model['MapDiff_IL6_MLN'], -1, 0) + np.roll(Model['MapDiff_IL6_MLN'], -1, 1) + np.roll(Model['MapDiff_IL6_MLN'], 1, 2) + np.roll(Model['MapDiff_IL6_MLN'], -1, 2)) + Model['MapDiff_IL6_MLN']*(np.roll(Model['C_IL6_MLN'], 1, 0) + np.roll(Model['C_IL6_MLN'], -1, 0) + np.roll(Model['C_IL6_MLN'], 1, 1) + np.roll(Model['C_IL6_MLN'], -1, 1) + np.roll(Model['C_IL6_MLN'], 1, 2) + np.roll(Model['C_IL6_MLN'], -1, 2)))
        
    return([VC_IL21_MLN, VC_IL2_MLN, VC_IL6_MLN, VC_TGFBeta_MLN, VC_IL10_MLN])
        ###############################################################################
        #Epithelium Space Dynamics
        ###############################################################################
        
def Mov_Epi(Model, dt, t):
    VA_Epi = Model['A_Epi']
    VA_eAg_Epi = Model['A_eAg_Epi']
    VA_tAg_Epi = Model['A_tAg_Epi']
    VA_sEpi = Model['A_sEpi']
    VA_eAg_sEpi = Model['A_eAg_sEpi']
    VA_tAg_sEpi = Model['A_tAg_sEpi']       
    for y in range(0, Model['y_max_LP'] + 1, 4):
        for x in range(0, Model['x_max_LP'] + 1, 4):
    #Basic Epithelium
            VA_Epi[x, y, Model['z_Epi']] = Model['A_Epi'][x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_Epi'][x, y - 1, Model['z_Epi']] + Model['A_Epi'][x + 1, y, Model['z_Epi']] + Model['A_Epi'][x - 1, y, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi'] + 1], Theta_Epi_cube(x, y + 1, Model['z_Epi'] + 1, Model)) * Model['A_Epi'][x, y, Model['z_Epi']])
            VA_eAg_Epi[:, x, y, Model['z_Epi']] = Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_eAg_Epi'][:, x, y - 1, Model['z_Epi']] + Model['A_eAg_Epi'][:, x + 1, y, Model['z_Epi']] + Model['A_eAg_Epi'][:, x - 1, y, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi'] + 1], Theta_Epi_cube(x, y + 1, Model['z_Epi'] + 1, Model)) * Model['A_eAg_Epi'][:, x, y, Model['z_Epi']])
            VA_tAg_Epi[:, x, y, Model['z_Epi']] = Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_tAg_Epi'][:, x, y - 1, Model['z_Epi']] + Model['A_tAg_Epi'][:, x + 1, y, Model['z_Epi']] + Model['A_tAg_Epi'][:, x - 1, y, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi'] + 1], Theta_Epi_cube(x, y + 1, Model['z_Epi'] + 1, Model)) * Model['A_tAg_Epi'][:, x, y, Model['z_Epi']])
        for x in range(1, Model['x_max_LP'] + 1, 4):
    #Crypt
            VA_Epi[x, y, Model['z_Epi']] = Model['A_Epi'][x, y, Model['z_Epi']] + dt * (- Model['M_Epi'] * (Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi']], Theta_Epi_cube(x + 1, y, Model['z_Epi'], Model)) + Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi']], Theta_Epi_cube(x - 1, y, Model['z_Epi'], Model)) + Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi']], Theta_Epi_cube(x, y + 1, Model['z_Epi'], Model)) + Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi']], Theta_Epi_cube(x, y - 1, Model['z_Epi'], Model))))
            VA_eAg_Epi[:, x, y, Model['z_Epi']] = Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] + dt * (- Model['M_Epi'] * (Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi']], Theta_Epi_cube(x + 1, y, Model['z_Epi'], Model)) + Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi']], Theta_Epi_cube(x - 1, y, Model['z_Epi'], Model)) + Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi']], Theta_Epi_cube(x, y + 1, Model['z_Epi'], Model)) + Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi']], Theta_Epi_cube(x, y - 1, Model['z_Epi'], Model))))
            VA_tAg_Epi[:, x, y, Model['z_Epi']] = Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] + dt * (- Model['M_Epi'] * (Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi']], Theta_Epi_cube(x + 1, y, Model['z_Epi'], Model)) + Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi']], Theta_Epi_cube(x - 1, y, Model['z_Epi'], Model)) + Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi']], Theta_Epi_cube(x, y + 1, Model['z_Epi'], Model)) + Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi']], Theta_Epi_cube(x, y - 1, Model['z_Epi'], Model))))
        for x in range(2, Model['x_max_LP'] + 1, 4):
    #Basic Epithelium
            VA_Epi[x, y, Model['z_Epi']] = Model['A_Epi'][x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_Epi'][x, y + 1, Model['z_Epi']] + Model['A_Epi'][x + 1, y, Model['z_Epi']] + Model['A_Epi'][x - 1, y, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi'] + 1], Theta_Epi_cube(x, y - 1, Model['z_Epi'] + 1, Model)) * Model['A_Epi'][x, y, Model['z_Epi']])
            VA_eAg_Epi[:, x, y, Model['z_Epi']] = Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_eAg_Epi'][:, x, y + 1, Model['z_Epi']] + Model['A_eAg_Epi'][:, x + 1, y, Model['z_Epi']] + Model['A_eAg_Epi'][:, x - 1, y, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi'] + 1], Theta_Epi_cube(x, y - 1, Model['z_Epi'] + 1, Model)) * Model['A_eAg_Epi'][:, x, y, Model['z_Epi']])
            VA_tAg_Epi[:, x, y, Model['z_Epi']] = Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_tAg_Epi'][:, x, y + 1, Model['z_Epi']] + Model['A_tAg_Epi'][:, x + 1, y, Model['z_Epi']] + Model['A_tAg_Epi'][:, x - 1, y, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi'] + 1], Theta_Epi_cube(x, y - 1, Model['z_Epi'] + 1, Model)) * Model['A_tAg_Epi'][:, x, y, Model['z_Epi']])
        for x in range(3, Model['x_max_LP'] + 1, 4):
    #Crypt
            VA_Epi[x, y, Model['z_Epi']] = Model['A_Epi'][x, y, Model['z_Epi']] + dt * (- Model['M_Epi'] * (Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi']], Theta_Epi_cube(x + 1, y, Model['z_Epi'], Model)) + Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi']], Theta_Epi_cube(x - 1, y, Model['z_Epi'], Model)) + Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi']], Theta_Epi_cube(x, y + 1, Model['z_Epi'], Model)) + Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi']], Theta_Epi_cube(x, y - 1, Model['z_Epi'], Model)))) 
            VA_eAg_Epi[:, x, y, Model['z_Epi']] = Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] + dt * (- Model['M_Epi'] * (Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi']], Theta_Epi_cube(x + 1, y, Model['z_Epi'], Model)) + Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi']], Theta_Epi_cube(x - 1, y, Model['z_Epi'], Model)) + Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi']], Theta_Epi_cube(x, y + 1, Model['z_Epi'], Model)) + Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi']], Theta_Epi_cube(x, y - 1, Model['z_Epi'], Model))))
            VA_tAg_Epi[:, x, y, Model['z_Epi']] = Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] + dt * (- Model['M_Epi'] * (Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi']], Theta_Epi_cube(x + 1, y, Model['z_Epi'], Model)) + Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi']], Theta_Epi_cube(x - 1, y, Model['z_Epi'], Model)) + Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi']], Theta_Epi_cube(x, y + 1, Model['z_Epi'], Model)) + Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi']], Theta_Epi_cube(x, y - 1, Model['z_Epi'], Model))))
    for y in range(1, Model['y_max_LP'] + 1, 4):
        for x in range(0, Model['x_max_LP'] + 1, 4):
    #Climbing and Top of Villus
            VA_Epi[x, y, Model['z_max_LP'] + 1] = Model['A_Epi'][x, y, Model['z_max_LP'] + 1] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_max_LP'] + 1], Theta_Epi_cube(x, y, Model['z_max_LP'] + 1, Model)) * Model['A_Epi'][x, y, Model['z_max_LP']])
            VA_eAg_Epi[:, x, y, Model['z_max_LP'] + 1] = Model['A_eAg_Epi'][:, x, y, Model['z_max_LP'] + 1] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_max_LP'] + 1], Theta_Epi_cube(x, y, Model['z_max_LP'] + 1, Model)) * Model['A_eAg_Epi'][:, x, y, Model['z_max_LP']])
            VA_tAg_Epi[:, x, y, Model['z_max_LP'] + 1] = Model['A_tAg_Epi'][:, x, y, Model['z_max_LP'] + 1] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_max_LP'] + 1], Theta_Epi_cube(x, y, Model['z_max_LP'] + 1, Model)) * Model['A_tAg_Epi'][:, x, y, Model['z_max_LP']])
            VA_Epi[x, y, Model['z_Epi'] + 1] += dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi'] + 1], Theta_Epi_cube(x, y, Model['z_Epi'] + 1, Model)) * (Model['A_Epi'][x, y + 1, Model['z_Epi']] + Model['A_Epi'][x, y - 1, Model['z_Epi']] + Model['A_Epi'][x + 1, y, Model['z_Epi']] + Model['A_Epi'][x - 1, y, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi'] + 2], Theta_Epi_cube(x, y, Model['z_Epi'] + 2, Model)) * Model['A_Epi'][x, y, Model['z_Epi'] + 1])
            VA_eAg_Epi[:, x, y, Model['z_Epi'] + 1] = Model['A_eAg_Epi'][:, x, y, Model['z_Epi'] + 1] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi'] + 1], Theta_Epi_cube(x, y, Model['z_Epi'] + 1, Model)) * (Model['A_eAg_Epi'][:, x, y + 1, Model['z_Epi']] + Model['A_eAg_Epi'][:, x, y - 1, Model['z_Epi']] + Model['A_eAg_Epi'][:, x + 1, y, Model['z_Epi']] + Model['A_eAg_Epi'][:, x - 1, y, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi'] + 2], Theta_Epi_cube(x, y, Model['z_Epi'] + 2, Model)) * Model['A_eAg_Epi'][:, x, y, Model['z_Epi'] + 1])
            VA_tAg_Epi[:, x, y, Model['z_Epi'] + 1] = Model['A_tAg_Epi'][:, x, y, Model['z_Epi'] + 1] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi'] + 1], Theta_Epi_cube(x, y, Model['z_Epi'] + 1, Model)) * (Model['A_tAg_Epi'][:, x, y + 1, Model['z_Epi']] + Model['A_tAg_Epi'][:, x, y - 1, Model['z_Epi']] + Model['A_tAg_Epi'][:, x + 1, y, Model['z_Epi']] + Model['A_tAg_Epi'][:, x - 1, y, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi'] + 2], Theta_Epi_cube(x, y, Model['z_Epi'] + 2, Model)) * Model['A_tAg_Epi'][:, x, y, Model['z_Epi'] + 1])
            for z in range(Model['z_Epi'] + 2, Model['z_max_LP'] + 1):
                VA_Epi[x, y, z] = Model['A_Epi'][x, y, z] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, z], Theta_Epi_cube(x, y, z, Model)) * Model['A_Epi'][x, y, z - 1] - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, z + 1], Theta_Epi_cube(x, y, z + 1)) * Model['A_Epi'][x, y, z])
                VA_eAg_Epi[:, x, y, z] = Model['A_eAg_Epi'][:, x, y, z] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, z], Theta_Epi_cube(x, y, z, Model)) * Model['A_eAg_Epi'][:, x, y, z - 1] - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, z + 1], Theta_Epi_cube(x, y, z + 1)) * Model['A_eAg_Epi'][:, x, y, z])
                VA_tAg_Epi[:, x, y, z] = Model['A_tAg_Epi'][:, x, y, z] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, z], Theta_Epi_cube(x, y, z, Model)) * Model['A_tAg_Epi'][:, x, y, z - 1] - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, z + 1], Theta_Epi_cube(x, y, z + 1)) * Model['A_tAg_Epi'][:, x, y, z])
        for x in range(1, Model['x_max_LP'] + 1, 4):
    #Basic Epithelium
            VA_Epi[x, y, Model['z_Epi']] = Model['A_Epi'][x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_Epi'][x, y - 1, Model['z_Epi']] + Model['A_Epi'][x + 1, y, Model['z_Epi']] + Model['A_Epi'][x, y + 1, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi'] + 1], Theta_Epi_cube(x - 1, y, Model['z_Epi'] + 1, Model)) * Model['A_Epi'][x, y, Model['z_Epi']])
            VA_eAg_Epi[:, x, y, Model['z_Epi']] = Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_eAg_Epi'][:, x, y - 1, Model['z_Epi']] + Model['A_eAg_Epi'][:, x + 1, y, Model['z_Epi']] + Model['A_eAg_Epi'][:, x, y + 1, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi'] + 1], Theta_Epi_cube(x - 1, y, Model['z_Epi'] + 1, Model)) * Model['A_eAg_Epi'][:, x, y, Model['z_Epi']])
            VA_tAg_Epi[:, x, y, Model['z_Epi']] = Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_tAg_Epi'][:, x, y - 1, Model['z_Epi']] + Model['A_tAg_Epi'][:, x + 1, y, Model['z_Epi']] + Model['A_tAg_Epi'][:, x, y + 1, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi'] + 1], Theta_Epi_cube(x - 1, y, Model['z_Epi'] + 1, Model)) * Model['A_tAg_Epi'][:, x, y, Model['z_Epi']])
        for x in range(2, Model['x_max_LP'] + 1, 4):
    #Crypt
            VA_Epi[x, y, Model['z_Epi']] = Model['A_Epi'][x, y, Model['z_Epi']] + dt * (- Model['M_Epi'] * (Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi']], Theta_Epi_cube(x + 1, y, Model['z_Epi'], Model)) + Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi']], Theta_Epi_cube(x - 1, y, Model['z_Epi'], Model)) + Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi']], Theta_Epi_cube(x, y + 1, Model['z_Epi'], Model)) + Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi']], Theta_Epi_cube(x, y - 1, Model['z_Epi'], Model))))
            VA_eAg_Epi[:, x, y, Model['z_Epi']] = Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] + dt * (- Model['M_Epi'] * (Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi']], Theta_Epi_cube(x + 1, y, Model['z_Epi'], Model)) + Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi']], Theta_Epi_cube(x - 1, y, Model['z_Epi'], Model)) + Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi']], Theta_Epi_cube(x, y + 1, Model['z_Epi'], Model)) + Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi']], Theta_Epi_cube(x, y - 1, Model['z_Epi'], Model))))
            VA_tAg_Epi[:, x, y, Model['z_Epi']] = Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] + dt * (- Model['M_Epi'] * (Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi']], Theta_Epi_cube(x + 1, y, Model['z_Epi'], Model)) + Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi']], Theta_Epi_cube(x - 1, y, Model['z_Epi'], Model)) + Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi']], Theta_Epi_cube(x, y + 1, Model['z_Epi'], Model)) + Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi']], Theta_Epi_cube(x, y - 1, Model['z_Epi'], Model))))
        for x in range(3, Model['x_max_LP'] + 1, 4):
    #Basic Epithelium
            VA_Epi[x, y, Model['z_Epi']] = Model['A_Epi'][x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_Epi'][x, y - 1, Model['z_Epi']] + Model['A_Epi'][x - 1, y, Model['z_Epi']] + Model['A_Epi'][x, y + 1, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi'] + 1], Theta_Epi_cube(x + 1, y, Model['z_Epi'] + 1, Model)) * Model['A_Epi'][x, y, Model['z_Epi']])
            VA_eAg_Epi[:, x, y, Model['z_Epi']] = Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_eAg_Epi'][:, x, y - 1, Model['z_Epi']] + Model['A_eAg_Epi'][:, x - 1, y, Model['z_Epi']] + Model['A_eAg_Epi'][:, x, y + 1, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi'] + 1], Theta_Epi_cube(x + 1, y, Model['z_Epi'] + 1, Model)) * Model['A_eAg_Epi'][:, x, y, Model['z_Epi']])
            VA_tAg_Epi[:, x, y, Model['z_Epi']] = Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_tAg_Epi'][:, x, y - 1, Model['z_Epi']] + Model['A_tAg_Epi'][:, x - 1, y, Model['z_Epi']] + Model['A_tAg_Epi'][:, x, y + 1, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi'] + 1], Theta_Epi_cube(x + 1, y, Model['z_Epi'] + 1, Model)) * Model['A_tAg_Epi'][:, x, y, Model['z_Epi']])
    for y in range(2, Model['y_max_LP'] + 1, 4):
        for x in range(0, Model['x_max_LP'] + 1, 4):
    #Basic Epithelium
            VA_Epi[x, y, Model['z_Epi']] = Model['A_Epi'][x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_Epi'][x, y + 1, Model['z_Epi']] + Model['A_Epi'][x + 1, y, Model['z_Epi']] + Model['A_Epi'][x - 1, y, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi'] + 1], Theta_Epi_cube(x, y - 1, Model['z_Epi'] + 1, Model)) * Model['A_Epi'][x, y, Model['z_Epi']])
            VA_eAg_Epi[:, x, y, Model['z_Epi']] = Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_eAg_Epi'][:, x, y + 1, Model['z_Epi']] + Model['A_eAg_Epi'][:, x + 1, y, Model['z_Epi']] + Model['A_eAg_Epi'][:, x - 1, y, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi'] + 1], Theta_Epi_cube(x, y - 1, Model['z_Epi'] + 1, Model)) * Model['A_eAg_Epi'][:, x, y, Model['z_Epi']])
            VA_tAg_Epi[:, x, y, Model['z_Epi']] = Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_tAg_Epi'][:, x, y + 1, Model['z_Epi']] + Model['A_tAg_Epi'][:, x + 1, y, Model['z_Epi']] + Model['A_tAg_Epi'][:, x - 1, y, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi'] + 1], Theta_Epi_cube(x, y - 1, Model['z_Epi'] + 1, Model)) * Model['A_tAg_Epi'][:, x, y, Model['z_Epi']])
        for x in range(1, Model['x_max_LP'] + 1, 4):
    #Crypt
            VA_Epi[x, y, Model['z_Epi']] = Model['A_Epi'][x, y, Model['z_Epi']] + dt * (- Model['M_Epi'] * (Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi']], Theta_Epi_cube(x + 1, y, Model['z_Epi'], Model)) + Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi']], Theta_Epi_cube(x - 1, y, Model['z_Epi'], Model)) + Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi']], Theta_Epi_cube(x, y + 1, Model['z_Epi'], Model)) + Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi']], Theta_Epi_cube(x, y - 1, Model['z_Epi'], Model))))
            VA_eAg_Epi[:, x, y, Model['z_Epi']] = Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] + dt * (- Model['M_Epi'] * (Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi']], Theta_Epi_cube(x + 1, y, Model['z_Epi'], Model)) + Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi']], Theta_Epi_cube(x - 1, y, Model['z_Epi'], Model)) + Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi']], Theta_Epi_cube(x, y + 1, Model['z_Epi'], Model)) + Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi']], Theta_Epi_cube(x, y - 1, Model['z_Epi'], Model))))
            VA_tAg_Epi[:, x, y, Model['z_Epi']] = Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] + dt * (- Model['M_Epi'] * (Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi']], Theta_Epi_cube(x + 1, y, Model['z_Epi'], Model)) + Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi']], Theta_Epi_cube(x - 1, y, Model['z_Epi'], Model)) + Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi']], Theta_Epi_cube(x, y + 1, Model['z_Epi'], Model)) + Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi']], Theta_Epi_cube(x, y - 1, Model['z_Epi'], Model))))
        for x in range(2, Model['x_max_LP'] + 1, 4):
    #Basic Epithelium
            VA_Epi[x, y, Model['z_Epi']] = Model['A_Epi'][x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_Epi'][x, y - 1, Model['z_Epi']] + Model['A_Epi'][x + 1, y, Model['z_Epi']] + Model['A_Epi'][x - 1, y, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi'] + 1], Theta_Epi_cube(x, y + 1, Model['z_Epi'] + 1, Model)) * Model['A_Epi'][x, y, Model['z_Epi']])
            VA_eAg_Epi[:, x, y, Model['z_Epi']] = Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_eAg_Epi'][:, x, y - 1, Model['z_Epi']] + Model['A_eAg_Epi'][:, x + 1, y, Model['z_Epi']] + Model['A_eAg_Epi'][:, x - 1, y, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi'] + 1], Theta_Epi_cube(x, y + 1, Model['z_Epi'] + 1, Model)) * Model['A_eAg_Epi'][:, x, y, Model['z_Epi']])
            VA_tAg_Epi[:, x, y, Model['z_Epi']] = Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_tAg_Epi'][:, x, y - 1, Model['z_Epi']] + Model['A_tAg_Epi'][:, x + 1, y, Model['z_Epi']] + Model['A_tAg_Epi'][:, x - 1, y, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi'] + 1], Theta_Epi_cube(x, y + 1, Model['z_Epi'] + 1, Model)) * Model['A_tAg_Epi'][:, x, y, Model['z_Epi']])
        for x in range(3, Model['x_max_LP'] + 1, 4):
    #Crypt
            VA_Epi[x, y, Model['z_Epi']] = Model['A_Epi'][x, y, Model['z_Epi']] + dt * (- Model['M_Epi'] * (Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi']], Theta_Epi_cube(x + 1, y, Model['z_Epi'], Model)) + Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi']], Theta_Epi_cube(x - 1, y, Model['z_Epi'], Model)) + Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi']], Theta_Epi_cube(x, y + 1, Model['z_Epi'], Model)) + Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi']], Theta_Epi_cube(x, y - 1, Model['z_Epi'], Model))))
            VA_eAg_Epi[:, x, y, Model['z_Epi']] = Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] + dt * (- Model['M_Epi'] * (Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi']], Theta_Epi_cube(x + 1, y, Model['z_Epi'], Model)) + Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi']], Theta_Epi_cube(x - 1, y, Model['z_Epi'], Model)) + Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi']], Theta_Epi_cube(x, y + 1, Model['z_Epi'], Model)) + Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi']], Theta_Epi_cube(x, y - 1, Model['z_Epi'], Model))))
            VA_tAg_Epi[:, x, y, Model['z_Epi']] = Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] + dt * (- Model['M_Epi'] * (Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi']], Theta_Epi_cube(x + 1, y, Model['z_Epi'], Model)) + Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi']], Theta_Epi_cube(x - 1, y, Model['z_Epi'], Model)) + Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi']], Theta_Epi_cube(x, y + 1, Model['z_Epi'], Model)) + Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi']], Theta_Epi_cube(x, y - 1, Model['z_Epi'], Model))))
    for y in range(3, Model['y_max_LP'] + 1, 4):
        for x in range(0, Model['x_max_LP'] + 1, 4):
    #Crypt
            VA_Epi[x, y, Model['z_Epi']] = Model['A_Epi'][x, y, Model['z_Epi']] + dt * (- Model['M_Epi'] * (Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi']], Theta_Epi_cube(x + 1, y, Model['z_Epi'], Model)) + Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi']], Theta_Epi_cube(x - 1, y, Model['z_Epi'], Model)) + Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi']], Theta_Epi_cube(x, y + 1, Model['z_Epi'], Model)) + Model['A_Epi'][x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi']], Theta_Epi_cube(x, y - 1, Model['z_Epi'], Model))))
            VA_eAg_Epi[:, x, y, Model['z_Epi']] = Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] + dt * (- Model['M_Epi'] * (Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi']], Theta_Epi_cube(x + 1, y, Model['z_Epi'], Model)) + Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi']], Theta_Epi_cube(x - 1, y, Model['z_Epi'], Model)) + Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi']], Theta_Epi_cube(x, y + 1, Model['z_Epi'], Model)) + Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi']], Theta_Epi_cube(x, y - 1, Model['z_Epi'], Model))))
            VA_tAg_Epi[:, x, y, Model['z_Epi']] = Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] + dt * (- Model['M_Epi'] * (Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi']], Theta_Epi_cube(x + 1, y, Model['z_Epi'], Model)) + Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi']], Theta_Epi_cube(x - 1, y, Model['z_Epi'], Model)) + Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y + 1, Model['z_Epi']], Theta_Epi_cube(x, y + 1, Model['z_Epi'], Model)) + Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y - 1, Model['z_Epi']], Theta_Epi_cube(x, y - 1, Model['z_Epi'], Model))))
        for x in range(1, Model['x_max_LP'] + 1, 4):
    #Basic Epithelium
            VA_Epi[x, y, Model['z_Epi']] = Model['A_Epi'][x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_Epi'][x, y - 1, Model['z_Epi']] + Model['A_Epi'][x - 1, y, Model['z_Epi']] + Model['A_Epi'][x, y + 1, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi'] + 1], Theta_Epi_cube(x + 1, y, Model['z_Epi'] + 1, Model)) * Model['A_Epi'][x, y, Model['z_Epi']])
            VA_eAg_Epi[:, x, y, Model['z_Epi']] = Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_eAg_Epi'][:, x, y - 1, Model['z_Epi']] + Model['A_eAg_Epi'][:, x - 1, y, Model['z_Epi']] + Model['A_eAg_Epi'][:, x, y + 1, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi'] + 1], Theta_Epi_cube(x + 1, y, Model['z_Epi'] + 1, Model)) * Model['A_eAg_Epi'][:, x, y, Model['z_Epi']])
            VA_tAg_Epi[:, x, y, Model['z_Epi']] = Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_tAg_Epi'][:, x, y - 1, Model['z_Epi']] + Model['A_tAg_Epi'][:, x - 1, y, Model['z_Epi']] + Model['A_tAg_Epi'][:, x, y + 1, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x + 1, y, Model['z_Epi'] + 1], Theta_Epi_cube(x + 1, y, Model['z_Epi'] + 1, Model)) * Model['A_tAg_Epi'][:, x, y, Model['z_Epi']])
        for x in range(2, Model['x_max_LP'] + 1, 4):
    #Climbing and Top of Villus
            VA_Epi[x, y, Model['z_max_LP'] + 1] = Model['A_Epi'][x, y, Model['z_max_LP'] + 1] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_max_LP'] + 1], Theta_Epi_cube(x, y, Model['z_max_LP'] + 1, Model)) * Model['A_Epi'][x, y, Model['z_max_LP']])
            VA_eAg_Epi[:, x, y, Model['z_max_LP'] + 1] = Model['A_eAg_Epi'][:, x, y, Model['z_max_LP'] + 1] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_max_LP'] + 1], Theta_Epi_cube(x, y, Model['z_max_LP'] + 1, Model)) * Model['A_eAg_Epi'][:, x, y, Model['z_max_LP']])
            VA_tAg_Epi[:, x, y, Model['z_max_LP'] + 1] = Model['A_tAg_Epi'][:, x, y, Model['z_max_LP'] + 1] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_max_LP'] + 1], Theta_Epi_cube(x, y, Model['z_max_LP'] + 1, Model)) * Model['A_tAg_Epi'][:, x, y, Model['z_max_LP']])
            VA_Epi[x, y, Model['z_Epi'] + 1] += dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi'] + 1], Theta_Epi_cube(x, y, Model['z_Epi'] + 1, Model)) * (Model['A_Epi'][x, y + 1, Model['z_Epi']] + Model['A_Epi'][x, y - 1, Model['z_Epi']] + Model['A_Epi'][x + 1, y, Model['z_Epi']] + Model['A_Epi'][x - 1, y, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi'] + 2], Theta_Epi_cube(x, y, Model['z_Epi'] + 2, Model)) * Model['A_Epi'][x, y, Model['z_Epi'] + 1])
            VA_eAg_Epi[:, x, y, Model['z_Epi'] + 1] = Model['A_eAg_Epi'][:, x, y, Model['z_Epi'] + 1] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi'] + 1], Theta_Epi_cube(x, y, Model['z_Epi'] + 1, Model)) * (Model['A_eAg_Epi'][:, x, y + 1, Model['z_Epi']] + Model['A_eAg_Epi'][:, x, y - 1, Model['z_Epi']] + Model['A_eAg_Epi'][:, x + 1, y, Model['z_Epi']] + Model['A_eAg_Epi'][:, x - 1, y, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi'] + 2], Theta_Epi_cube(x, y, Model['z_Epi'] + 2, Model)) * Model['A_eAg_Epi'][:, x, y, Model['z_Epi'] + 1])
            VA_tAg_Epi[:, x, y, Model['z_Epi'] + 1] = Model['A_tAg_Epi'][:, x, y, Model['z_Epi'] + 1] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi'] + 1], Theta_Epi_cube(x, y, Model['z_Epi'] + 1, Model)) * (Model['A_tAg_Epi'][:, x, y + 1, Model['z_Epi']] + Model['A_tAg_Epi'][:, x, y - 1, Model['z_Epi']] + Model['A_tAg_Epi'][:, x + 1, y, Model['z_Epi']] + Model['A_tAg_Epi'][:, x - 1, y, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi'] + 2], Theta_Epi_cube(x, y, Model['z_Epi'] + 2, Model)) * Model['A_tAg_Epi'][:, x, y, Model['z_Epi'] + 1])
            for z in range(Model['z_Epi'] + 2, Model['z_max_LP'] + 1):
                VA_Epi[x, y, z] = Model['A_Epi'][x, y, z] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, z], Theta_Epi_cube(x, y, z, Model)) * Model['A_Epi'][x, y, z - 1] - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, z + 1], Theta_Epi_cube(x, y, z + 1)) * Model['A_Epi'][x, y, z])
                VA_eAg_Epi[:, x, y, z] = Model['A_eAg_Epi'][:, x, y, z] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, z], Theta_Epi_cube(x, y, z, Model)) * Model['A_eAg_Epi'][:, x, y, z - 1] - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, z + 1], Theta_Epi_cube(x, y, z + 1)) * Model['A_eAg_Epi'][:, x, y, z])
                VA_tAg_Epi[:, x, y, z] = Model['A_tAg_Epi'][:, x, y, z] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, z], Theta_Epi_cube(x, y, z, Model)) * Model['A_tAg_Epi'][:, x, y, z - 1] - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, z + 1], Theta_Epi_cube(x, y, z + 1)) * Model['A_tAg_Epi'][:, x, y, z])
        for x in range(3, Model['x_max_LP'] + 1, 4):
    #Basic Epithelium
            VA_Epi[x, y, Model['z_Epi']] = Model['A_Epi'][x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_Epi'][x, y - 1, Model['z_Epi']] + Model['A_Epi'][x + 1, y, Model['z_Epi']] + Model['A_Epi'][x, y + 1, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi'] + 1], Theta_Epi_cube(x - 1, y, Model['z_Epi'] + 1, Model)) * Model['A_Epi'][x, y, Model['z_Epi']])
            VA_eAg_Epi[:, x, y, Model['z_Epi']] = Model['A_eAg_Epi'][:, x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_eAg_Epi'][:, x, y - 1, Model['z_Epi']] + Model['A_eAg_Epi'][:, x + 1, y, Model['z_Epi']] + Model['A_eAg_Epi'][:, x, y + 1, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi'] + 1], Theta_Epi_cube(x - 1, y, Model['z_Epi'] + 1, Model)) * Model['A_eAg_Epi'][:, x, y, Model['z_Epi']])
            VA_tAg_Epi[:, x, y, Model['z_Epi']] = Model['A_tAg_Epi'][:, x, y, Model['z_Epi']] + dt * (Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x, y, Model['z_Epi']], Theta_Epi_cube(x, y, Model['z_Epi'], Model)) * (Model['A_tAg_Epi'][:, x, y - 1, Model['z_Epi']] + Model['A_tAg_Epi'][:, x + 1, y, Model['z_Epi']] + Model['A_tAg_Epi'][:, x, y + 1, Model['z_Epi']]) - Model['M_Epi'] * Omega(Model['D_max_Epi'] * Model['N_Epi'][x - 1, y, Model['z_Epi'] + 1], Theta_Epi_cube(x - 1, y, Model['z_Epi'] + 1, Model)) * Model['A_tAg_Epi'][:, x, y, Model['z_Epi']])
            
    return([VA_Epi, VA_sEpi, VA_eAg_Epi, VA_tAg_Epi, VA_eAg_sEpi, VA_tAg_sEpi])    



